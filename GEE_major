var roi_point=ee.FeatureCollection("users/987359412/Export_Output_countrypoint");
var roi=ee.FeatureCollection("users/987359412/Export_Output");//加载roi
var styling={color:'red',fillColor:'red'}
var river= table
print(roi_point)
//point1
 function maskS2clouds(image){
  var qa = image.select("QA60");
  
  var cloudBitMask = 1 << 10;
  var cirrusBitMask a= 1 << 11;
  
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
               .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  
  return image.updateMask(mask)
         
              .set('system:time_start', image.get('system:time_start'));
}
var collection_s2 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(roi_point) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
//print(collection_s2)
var collection_l8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(roi_point)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
//print( collection_l8)                  
var point_1=ee.Feature(roi_point.toList(60).get(0)).geometry()
var collection_s2_1 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_1) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_s2_1_1=collection_s2_1.first()
var collection_s2_1_date_1=collection_s2_1_1.date().format()
var collection_s2_1_2=ee.Image(collection_s2_1.toList(10).get(1))
var collection_s2_1_date_2=collection_s2_1_2.date().format()
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0); // 去云

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);// 这里就是对以SR开头的波段进行一个计算，让它回到一个正常的值，以便我们使用。
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0); // 这里就是对我们要得到的地表温度波段进行计算
  
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
}

function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBands, null, true);
}
var collection_l8_1 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_1)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l8_1_1=collection_l8_1.first()
collection_l8_1_1 = collection_l8_1_1.select('SR_B[1-5]')
var ndwi = collection_l8_1_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_1_1=collection_l8_1_1.addBands(ndwi)
//Map.addLayer(collection_l8_1_1.select(['SR_B4','SR_B3','SR_B2']),{max:0.5,gamma:0.8},'rgb')
//GLCM
var gray = collection_l8_1_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_1_1.select('SR_B5'),
      'R': collection_l8_1_1.select('SR_B4'),
      'G': collection_l8_1_1.select('SR_B3'),
}).rename('gray');

var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
//print('glcm',glcm)

// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
//Map.addLayer(glcm.select('gray_asm'),{max:1})
collection_l8_1_1=collection_l8_1_1.addBands(glcm)

var collection_l8_1_date_1=collection_l8_1_1.date().format()
var training_l8_1_1 = collection_l8_1_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_1_1=training_l8_1_1.map(function(f){return f.set("date",collection_l8_1_date_1)})
var feature_1_1=ee.Feature(training_l8_1_1.toList(10).get(0));
var feature1_1=feature_1_1.set({'waterlevel':3});
//print(feature1_1)

//l8s2_1
var feature1_l8_1_1=collection_l8_1_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_1_1=collection_s2_1_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
function showHistogram(image, roi, name) { 
  var options = { 
    title: '波段直方图:'+name, 
    hAxis: {title: 'DN 值'}, 
    vAxis: {title: '频率'}, 
    series: { 
      0: {color: "red"}, 
      1: {color: "green"}, 
      2: {color: "blue"} ,
      3:{color: "yellow"},
      4:{color:'black'}
    } 
  };

var histogram = ui.Chart.image.histogram({ 
    image: image.select(["R", "G", "B",'NIR','Aerosols']), 
    region: roi, 
    maxBuckets: Math.pow(2, 8), 
    scale: 30, 
    maxPixels: 1e13 
  }).setSeriesNames(["redBand", "greenBand", "blueBand",'nirBand','aerosolsBand']) 
  .setOptions(options); 
  //print(histogram); 
}

//showHistogram(feature1_l8_1_1, feature1_l8_1_1.geometry(), "原始"); 
//showHistogram(feature1_s2_1_1, feature1_s2_1_1.geometry(), "目标"); 


function lookup(sourceHist, targetHist) { 
  //第一列数据是原始值，第二列是统计的累积数量 
  var sourceValues = sourceHist.slice(1, 0, 1).project([0]); 
  var sourceCounts = sourceHist.slice(1, 1, 2).project([0]); 
  sourceCounts = sourceCounts.divide(sourceCounts.get([-1])); 
 
  var targetValues = targetHist.slice(1, 0, 1).project([0]); 
  var targetCounts = targetHist.slice(1, 1, 2).project([0]); 
  targetCounts = targetCounts.divide(targetCounts.get([-1])); 
 
  //遍历原始数据值，查找大于这个值的最大索引，然后返回对应的数据 
  var yValues = sourceCounts.toList().map(function(n) { 
    var index = targetCounts.gte(n).argmax(); 
    return targetValues.get(index); 
  }); 
  return {x: sourceValues.toList(), y: yValues}; 
}
function histogramMatching(sourceImg, targetImg) { 
  var geom = sourceImg.geometry(); 
  var args = { 
    reducer: ee.Reducer.autoHistogram({maxBuckets: 256, cumulative: true}), 
    geometry: geom, 
    scale: 30, 
    maxPixels: 1e13, 
    tileScale: 16 
  }; 
  var source = sourceImg.reduceRegion(args); 
  var target = targetImg.updateMask(sourceImg.mask()) 
                        .reduceRegion(args); 
  //使用插值生成对应的数据 
  var red = sourceImg.select(['R']).interpolate(lookup(source.getArray('R'), target.getArray('R'))); 
  var green = sourceImg.select(['G']).interpolate(lookup(source.getArray('G'), target.getArray('G'))); 
  var blue = sourceImg.select(['B']).interpolate(lookup(source.getArray('B'), target.getArray('B'))); 
  var nir= sourceImg.select(['NIR']).interpolate(lookup(source.getArray('NIR'), target.getArray('NIR'))); 
  var aerosols=sourceImg.select(['Aerosols']).interpolate(lookup(source.getArray('Aerosols'), target.getArray('Aerosols'))); 
  //生成RGB图像 
  return ee.Image.cat(red,green,blue).addBands(nir).addBands(aerosols); 
} 


var result1_1 = histogramMatching(feature1_s2_1_1, feature1_l8_1_1); 
var sel_bands_s2l8_1_1 = result1_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
var ndwi = sel_bands_s2l8_1_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_1_1=sel_bands_s2l8_1_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_1_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_1_1.select('SR_B5'),
      'R': sel_bands_s2l8_1_1.select('SR_B4'),
      'G': sel_bands_s2l8_1_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_1_1=sel_bands_s2l8_1_1.addBands(glcm)
var training_s2l8_1_1= sel_bands_s2l8_1_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})

training_s2l8_1_1=training_s2l8_1_1.map(function(f){return f.set("date",collection_s2_1_date_1)})
var s2l8_feature1_1=ee.Feature(training_s2l8_1_1.toList(10).get(0))
s2l8_feature1_1=s2l8_feature1_1.set({'waterlevel':3})
//print(s2l8_feature1_1)
//point4
var point_4=ee.Feature(roi_point.toList(60).get(3)).geometry()
var collection_s2_4 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_4) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_4 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_4)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序   
collection_l8_4 = collection_l8_4.select('SR_B[1-5]')
var collection_s2_4_2=ee.Image(collection_s2_4.toList(10).get(1))
var collection_s2_4_date=collection_s2_4_2.date().format()
var collection_l8_4_1=collection_l8_4.first()
var ndwi = collection_l8_4_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_4_1=collection_l8_4_1.addBands(ndwi)
//GLCM
var gray = collection_l8_4_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_4_1.select('SR_B5'),
      'R': collection_l8_4_1.select('SR_B4'),
      'G': collection_l8_4_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_4_1=collection_l8_4_1.addBands(glcm)
var collection_l8_4_date_1=collection_l8_4_1.date().format()
var training_l8_4_1 = collection_l8_4_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})

training_l8_4_1=training_l8_4_1.map(function(f){return f.set("date",collection_l8_4_date_1)})
var feature_4_1_1=ee.Feature(training_l8_4_1.toList(10).get(0));
var feature4_1_1=feature_4_1_1.set({'waterlevel':4});

var feature_4_1_2=ee.Feature(training_l8_4_1.toList(10).get(1));
var feature4_1_2=feature_4_1_2.set({'waterlevel':4});

var feature_4_1_3=ee.Feature(training_l8_4_1.toList(10).get(2));
var feature4_1_3=feature_4_1_3.set({'waterlevel':4});
var collection_l8_4_4=ee.Image(collection_l8_4.toList(10).get(3))
var ndwi = collection_l8_4_4.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_4_4=collection_l8_4_4.addBands(ndwi)
//GLCM
var gray = collection_l8_4_4.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_4_4.select('SR_B5'),
      'R': collection_l8_4_4.select('SR_B4'),
      'G': collection_l8_4_4.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_4_4=collection_l8_4_4.addBands(glcm)
var collection_l8_4_date_4=collection_l8_4_4.date().format()
var training_l8_4_4 = collection_l8_4_4.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_4_4=training_l8_4_4.map(function(f){return f.set("date",collection_l8_4_date_4)})
var feature_4_4=ee.Feature(training_l8_4_4.toList(10).get(0));
var feature4_4=feature_4_4.set({'waterlevel':3});
//print(feature4_4)
//l8s2_2
var feature1_l8_4=collection_l8_4_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_4=collection_s2_4_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result2 = histogramMatching(feature1_s2_4, feature1_l8_4); 
var sel_bands_s2l8_2 = result2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
var ndwi = sel_bands_s2l8_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_2=sel_bands_s2l8_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_4_4.select('SR_B5'),
      'R': collection_l8_4_4.select('SR_B4'),
      'G': collection_l8_4_4.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_2=sel_bands_s2l8_2.addBands(glcm)
var training_s2l8_2= sel_bands_s2l8_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_2=training_s2l8_2.map(function(f){return f.set("date",collection_s2_4_date)})

var s2l8_feature2_1=ee.Feature(training_s2l8_2.toList(10).get(0))
s2l8_feature2_1=s2l8_feature2_1.set({'waterlevel':4})
//print(s2l8_feature2_1)
//point5
var point_5=ee.Feature(roi_point.toList(60).get(4)).geometry()
var collection_s2_5 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_5) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_5 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_5)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序     
collection_l8_5 = collection_l8_5.select('SR_B[1-5]')                  
var collection_l8_5_3=ee.Image(collection_l8_5.toList(10).get(2))
var ndwi = collection_l8_5_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_5_3=collection_l8_5_3.addBands(ndwi)
//GLCM
var gray = collection_l8_5_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_5_3.select('SR_B5'),
      'R': collection_l8_5_3.select('SR_B4'),
      'G': collection_l8_5_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_5_3=collection_l8_5_3.addBands(glcm)
var collection_l8_5_date_3=collection_l8_5_3.date().format()
var training_l8_5_3 = collection_l8_5_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_5_3=training_l8_5_3.map(function(f){return f.set("date",collection_l8_5_date_3)})
var feature_5_3_1=ee.Feature(training_l8_5_3.toList(10).get(0));
var feature5_3_1=feature_5_3_1.set({'waterlevel':4});
var feature_5_3_2=ee.Feature(training_l8_5_3.toList(10).get(1));
var feature5_3_2=feature_5_3_2.set({'waterlevel':3});
var feature_5_3_3=ee.Feature(training_l8_5_3.toList(10).get(2));
var feature5_3_3=feature_5_3_3.set({'waterlevel':null});
var feature_5_3_4=ee.Feature(training_l8_5_3.toList(10).get(3));
var feature5_3_4=feature_5_3_4.set({'waterlevel':6});
var feature_5_3_5=ee.Feature(training_l8_5_3.toList(10).get(4));
var feature5_3_5=feature_5_3_5.set({'waterlevel':3});
var collection_l8_5_4=ee.Image(collection_l8_5.toList(10).get(3))
var ndwi = collection_l8_5_4.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_5_4=collection_l8_5_4.addBands(ndwi)
//GLCM
var gray = collection_l8_5_4.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_5_4.select('SR_B5'),
      'R': collection_l8_5_4.select('SR_B4'),
      'G': collection_l8_5_4.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_5_4=collection_l8_5_4.addBands(glcm)
var collection_l8_5_date_4=collection_l8_5_4.date().format()
var training_l8_5_4 = collection_l8_5_4.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_5_4=training_l8_5_4.map(function(f){return f.set("date",collection_l8_5_date_4)})
var feature_5_4_1=ee.Feature(training_l8_5_4.toList(10).get(0));
var feature5_4_1=feature_5_4_1.set({'waterlevel':3});
var feature_5_4_2=ee.Feature(training_l8_5_4.toList(10).get(1));
var feature5_4_2=feature_5_4_2.set({'waterlevel':null});
var feature_5_4_3=ee.Feature(training_l8_5_4.toList(10).get(2));
var feature5_4_3=feature_5_4_3.set({'waterlevel':4});
//print(feature5_4_1,feature5_4_2,feature5_4_3)
var collection_s2_5_1=collection_s2_5.first()
var collection_s2_5_date_1=collection_s2_5_1.date().format()
//l8s2_3
var feature1_l8_5=collection_l8_5_4.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_5=collection_s2_5_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result3 = histogramMatching(feature1_s2_5, feature1_l8_5); 
var sel_bands_s2l8_3 = result3.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_3=sel_bands_s2l8_3.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_3.select('SR_B5'),
      'R': sel_bands_s2l8_3.select('SR_B4'),
      'G': sel_bands_s2l8_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_3=sel_bands_s2l8_3.addBands(glcm)
var training_s2l8_3= sel_bands_s2l8_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_3=training_s2l8_3.map(function(f){return f.set("date",collection_s2_5_date_1)})
var s2l8_feature3_1=ee.Feature(training_s2l8_3.toList(10).get(0))
s2l8_feature3_1=s2l8_feature3_1.set({'waterlevel':4})
var s2l8_feature3_2=ee.Feature(training_s2l8_3.toList(10).get(1))
s2l8_feature3_2=s2l8_feature3_2.set({'waterlevel':3})
//print(s2l8_feature3_1,s2l8_feature3_2)
//point6
var point_6=ee.Feature(roi_point.toList(60).get(5)).geometry()
var collection_s2_6 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_6) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_6 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_6)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l8_6 = collection_l8_6.select('SR_B[1-5]')  
var collection_l8_6_1=collection_l8_6.first()
//NDWI
var ndwi = collection_l8_6_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_6_1=collection_l8_6_1.addBands(ndwi)
//GLCM
var gray = collection_l8_6_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_6_1.select('SR_B5'),
      'R': collection_l8_6_1.select('SR_B4'),
      'G': collection_l8_6_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_6_1=collection_l8_6_1.addBands(glcm)
var collection_l8_6_date_1=collection_l8_6_1.date().format()
var training_l8_6_1 = collection_l8_6_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_6_1=training_l8_6_1.map(function(f){return f.set("date",collection_l8_6_date_1)})

var feature_6_1_1=ee.Feature(training_l8_6_1.toList(10).get(0));
var feature6_1_1=feature_6_1_1.set({'waterlevel':3});
var feature_6_1_2=ee.Feature(training_l8_6_1.toList(10).get(1));
var feature6_1_2=feature_6_1_2.set({'waterlevel':3});
//print(feature6_1_1,feature6_1_2)
var collection_s2_6_1=collection_s2_6.first()
var collection_s2_6_date_1=collection_s2_6_1.date().format()
//l8s2_4
var feature1_l8_6=collection_l8_6_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_6=collection_s2_6_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result4 = histogramMatching(feature1_s2_6, feature1_l8_6); 
var sel_bands_s2l8_4 = result4.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_4.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_4=sel_bands_s2l8_4.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_4.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_4.select('SR_B5'),
      'R': sel_bands_s2l8_4.select('SR_B4'),
      'G': sel_bands_s2l8_4.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_4=sel_bands_s2l8_4.addBands(glcm)
var training_s2l8_4= sel_bands_s2l8_4.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_4=training_s2l8_4.map(function(f){return f.set("date",collection_s2_6_date_1)})
var s2l8_feature4_1=ee.Feature(training_s2l8_4.toList(10).get(0))
s2l8_feature4_1=s2l8_feature4_1.set({'waterlevel':3})
//print(s2l8_feature4_1)
//point8
var point_8=ee.Feature(roi_point.toList(60).get(7)).geometry()
var collection_s2_8 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_8) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_8)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l8_8 = collection_l8_8.select('SR_B[1-5]')
var collection_l8_8_2=ee.Image(collection_l8_8.toList(10).get(1))
//NDWI
var ndwi = collection_l8_8_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_8_2=collection_l8_8_2.addBands(ndwi)
//GLCM
var gray = collection_l8_8_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_8_2.select('SR_B5'),
      'R': collection_l8_8_2.select('SR_B4'),
      'G': collection_l8_8_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_8_2=collection_l8_8_2.addBands(glcm)
var collection_l8_8_date_2=collection_l8_8_2.date().format()
var training_l8_8_2 = collection_l8_8_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_8_2=training_l8_8_2.map(function(f){return f.set("date",collection_l8_8_date_2)})
var feature_8_2_1=ee.Feature(training_l8_8_2.toList(10).get(0));
var feature8_2_1=feature_8_2_1.set({'waterlevel':null});
var feature_8_2_2=ee.Feature(training_l8_8_2.toList(10).get(1));
var feature8_2_2=feature_8_2_2.set({'waterlevel':6});
//print(feature8_2_1,feature8_2_2)
//point10
var point_10=ee.Feature(roi_point.toList(60).get(9)).geometry()
var collection_s2_10 = ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_10) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_10 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_10)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序                  
collection_l8_10 = collection_l8_10.select('SR_B[1-5]')
var collection_l8_10_1=collection_l8_10.first()
//NDWI
var ndwi = collection_l8_10_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_10_1=collection_l8_10_1.addBands(ndwi)
//GLCM
var gray = collection_l8_10_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_10_1.select('SR_B5'),
      'R': collection_l8_10_1.select('SR_B4'),
      'G': collection_l8_10_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_10_1=collection_l8_10_1.addBands(glcm)
var collection_l8_10_date_1=collection_l8_10_1.date().format()
var training_l8_10_1 = collection_l8_10_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_10_1=training_l8_10_1.map(function(f){return f.set("date",collection_l8_10_date_1)})
var feature_10_1_1=ee.Feature(training_l8_10_1.toList(10).get(0));
var feature10_1_1=feature_10_1_1.set({'waterlevel':4});
var feature_10_1_2=ee.Feature(training_l8_10_1.toList(10).get(1));
var feature10_1_2=feature_10_1_2.set({'waterlevel':null});
//print(feature10_1_1,feature10_1_2)
var collection_s2_10_1=collection_s2_10.first()
var collection_s2_10_date_1=collection_s2_10_1.date().format()
//l8s2_5
var feature1_l8_10=collection_l8_10_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_10=collection_s2_10_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result5 = histogramMatching(feature1_s2_10, feature1_l8_10); 
var sel_bands_s2l8_5 = result5.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_5.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_5=sel_bands_s2l8_5.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_5.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_5.select('SR_B5'),
      'R': sel_bands_s2l8_5.select('SR_B4'),
      'G': sel_bands_s2l8_5.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_5=sel_bands_s2l8_5.addBands(glcm)
var training_s2l8_5= sel_bands_s2l8_5.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_5=training_s2l8_5.map(function(f){return f.set("date",collection_s2_10_date_1)})
var s2l8_feature5_1=ee.Feature(training_s2l8_5.toList(10).get(0))
s2l8_feature5_1=s2l8_feature5_1.set({'waterlevel':4})
//print(s2l8_feature5_1)
//point12
var point_12=ee.Feature(roi_point.toList(60).get(11)).geometry()
var collection_s2_12= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_12) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_12= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_12)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序                  
collection_l8_12 = collection_l8_12.select('SR_B[1-5]')  
var collection_l8_12_1=collection_l8_12.first()
//NDWI
var ndwi = collection_l8_12_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_12_1=collection_l8_12_1.addBands(ndwi)
//GLCM
var gray = collection_l8_12_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_12_1.select('SR_B5'),
      'R': collection_l8_12_1.select('SR_B4'),
      'G': collection_l8_12_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_12_1=collection_l8_12_1.addBands(glcm)
var collection_l8_12_date_1=collection_l8_12_1.date().format()
var training_l8_12_1 = collection_l8_12_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_12_1=training_l8_12_1.map(function(f){return f.set("date",collection_l8_12_date_1)})

var feature_12_1_1=ee.Feature(training_l8_12_1.toList(10).get(0));
var feature12_1_1=feature_12_1_1.set({'waterlevel':3});
var feature_12_1_2=ee.Feature(training_l8_12_1.toList(10).get(1));
var feature12_1_2=feature_12_1_2.set({'waterlevel':3});
var feature_12_1_3=ee.Feature(training_l8_12_1.toList(10).get(2));
var feature12_1_3=feature_12_1_3.set({'waterlevel':2});
//print(feature12_1_1,feature12_1_2,feature12_1_3)
var collection_s2_12_5=ee.Image(collection_s2_12.toList(10).get(4))
var collection_s2_12_date_5=collection_s2_12_5.date().format()
var collection_s2_12_6=ee.Image(collection_s2_12.toList(10).get(5))
var collection_s2_12_date_6=collection_s2_12_6.date().format()
//l8s2_6_1
var feature1_l8_12_1=collection_l8_12_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_12_1=collection_s2_12_5.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result6_1 = histogramMatching(feature1_s2_12_1, feature1_l8_12_1); 
var sel_bands_s2l8_6_1 = result6_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_6_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_6_1=sel_bands_s2l8_6_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_6_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_6_1.select('SR_B5'),
      'R': sel_bands_s2l8_6_1.select('SR_B4'),
      'G': sel_bands_s2l8_6_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_6_1=sel_bands_s2l8_6_1.addBands(glcm)
var training_s2l8_6_1= sel_bands_s2l8_6_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_6_1=training_s2l8_6_1.map(function(f){return f.set("date",collection_s2_12_date_5)})
var s2l8_feature6_1=ee.Feature(training_s2l8_6_1.toList(10).get(0))
s2l8_feature6_1=s2l8_feature6_1.set({'waterlevel':3})
//print(s2l8_feature6_1)
//point(13)
var point_13=ee.Feature(roi_point.toList(60).get(12)).geometry()
var collection_s2_13= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_13) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_13= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_13)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l8_13 = collection_l8_13.select('SR_B[1-5]')  
var collection_l8_13_1=collection_l8_13.first()
//NDWI
var ndwi = collection_l8_13_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_13_1=collection_l8_13_1.addBands(ndwi)
//GLCM
var gray = collection_l8_13_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_13_1.select('SR_B5'),
      'R': collection_l8_13_1.select('SR_B4'),
      'G': collection_l8_13_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_13_1=collection_l8_13_1.addBands(glcm)
var collection_l8_13_date_1=collection_l8_13_1.date().format()
var training_l8_13_1 = collection_l8_13_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_13_1=training_l8_13_1.map(function(f){return f.set("date",collection_l8_13_date_1)})
var feature_13_1_1=ee.Feature(training_l8_13_1.toList(10).get(0));
var feature13_1_1=feature_13_1_1.set({'waterlevel':3});
var feature_13_1_2=ee.Feature(training_l8_13_1.toList(10).get(1));
var feature13_1_2=feature_13_1_2.set({'waterlevel':4});
//print(feature13_1_1,feature13_1_2)
var collection_l8_13_2=ee.Image(collection_l8_13.toList(10).get(1))
//NDWI
var ndwi = collection_l8_13_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_13_2=collection_l8_13_2.addBands(ndwi)
//GLCM
var gray = collection_l8_13_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_13_2.select('SR_B5'),
      'R': collection_l8_13_2.select('SR_B4'),
      'G': collection_l8_13_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_13_2=collection_l8_13_2.addBands(glcm)
var collection_l8_13_date_2=collection_l8_13_2.date().format()
var training_l8_13_2 = collection_l8_13_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_13_2=training_l8_13_2.map(function(f){return f.set("date",collection_l8_13_date_2)})
var feature_13_2_1=ee.Feature(training_l8_13_2.toList(10).get(0));
var feature13_2_1=feature_13_2_1.set({'waterlevel':null});
var feature_13_2_2=ee.Feature(training_l8_13_2.toList(10).get(1));
var feature13_2_2=feature_13_2_2.set({'waterlevel':5});
//print(feature13_2_1,feature13_2_2)
var collection_l8_13_3=ee.Image(collection_l8_13.toList(10).get(2))
//NDWI
var ndwi = collection_l8_13_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_13_3=collection_l8_13_3.addBands(ndwi)
//GLCM
var gray = collection_l8_13_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_13_3.select('SR_B5'),
      'R': collection_l8_13_3.select('SR_B4'),
      'G': collection_l8_13_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_13_3=collection_l8_13_3.addBands(glcm)
var collection_l8_13_date_3=collection_l8_13_3.date().format()
var training_l8_13_3 = collection_l8_13_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_13_3=training_l8_13_3.map(function(f){return f.set("date",collection_l8_13_date_3)})
var feature_13_3_1=ee.Feature(training_l8_13_3.toList(10).get(0));
var feature13_3_1=feature_13_3_1.set({'waterlevel':null});
var feature_13_3_2=ee.Feature(training_l8_13_3.toList(10).get(1));
var feature13_3_2=feature_13_3_2.set({'waterlevel':5});
var feature_13_3_3=ee.Feature(training_l8_13_3.toList(10).get(2));
var feature13_3_3=feature_13_3_3.set({'waterlevel':3});
var feature_13_3_4=ee.Feature(training_l8_13_3.toList(10).get(3));
var feature13_3_4=feature_13_3_4.set({'waterlevel':4});
//print(feature13_3_1,feature13_3_2,feature13_3_3,feature13_3_4)
//l8s2_7_1
var collection_s2_13_1=collection_s2_13.first()
var collection_s2_13_date_1=collection_s2_13_1.date().format()
var collection_s2_13_2=ee.Image(collection_s2_13.toList(10).get(1))
var collection_s2_13_date_2=collection_s2_13_2.date().format()
var feature1_l8_13_1=collection_l8_13_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_13_1=collection_s2_13_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result7_1 = histogramMatching(feature1_s2_13_1, feature1_l8_13_1); 
var sel_bands_s2l8_7_1 = result7_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_7_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_7_1=sel_bands_s2l8_7_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_7_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_7_1.select('SR_B5'),
      'R': sel_bands_s2l8_7_1.select('SR_B4'),
      'G': sel_bands_s2l8_7_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_7_1=sel_bands_s2l8_7_1.addBands(glcm)
var training_s2l8_7_1= sel_bands_s2l8_7_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_7_1=training_s2l8_7_1.map(function(f){return f.set("date",collection_s2_13_date_2)})
var s2l8_feature7_1=ee.Feature(training_s2l8_7_1.toList(10).get(0))
s2l8_feature7_1=s2l8_feature7_1.set({'waterlevel':3})
//print(s2l8_feature7_1)
///point15
var point_15=ee.Feature(roi_point.toList(60).get(14)).geometry()
var collection_s2_15= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_15) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_s2_15_2=ee.Image(collection_s2_15.toList(10).get(1))
var collection_s2_15_date_2=collection_s2_15_2.date().format()
var collection_l8_15= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_15)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l8_15 = collection_l8_15.select('SR_B[1-5]')
var collection_l8_15_1=collection_l8_15.first()
//NDWI
var ndwi = collection_l8_15_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_15_1=collection_l8_15_1.addBands(ndwi)
//GLCM
var gray = collection_l8_15_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_15_1.select('SR_B5'),
      'R': collection_l8_15_1.select('SR_B4'),
      'G': collection_l8_15_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_15_1=collection_l8_15_1.addBands(glcm)
var collection_l8_15_date_1=collection_l8_15_1.date().format()
var training_l8_15_1 = collection_l8_15_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_15_1=training_l8_15_1.map(function(f){return f.set("date",collection_l8_15_date_1)})
var feature_15_1_1=ee.Feature(training_l8_15_1.toList(10).get(0));
var feature15_1_1=feature_15_1_1.set({'waterlevel':4});
var feature_15_1_2=ee.Feature(training_l8_15_1.toList(10).get(1));
var feature15_1_2=feature_15_1_2.set({'waterlevel':null});
var feature_15_1_3=ee.Feature(training_l8_15_1.toList(10).get(2));
var feature15_1_3=feature_15_1_3.set({'waterlevel':4});
//print(feature15_1_1,feature15_1_2,feature15_1_3)
//l8s2_8
var feature1_l8_15_1=collection_l8_15_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_15_1=collection_s2_15_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result8 = histogramMatching(feature1_s2_15_1, feature1_l8_15_1); 
var sel_bands_s2l8_8 = result8.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_8.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_8=sel_bands_s2l8_8.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_8.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_8.select('SR_B5'),
      'R': sel_bands_s2l8_8.select('SR_B4'),
      'G': sel_bands_s2l8_8.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_8=sel_bands_s2l8_8.addBands(glcm)
var training_s2l8_8= sel_bands_s2l8_8.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_8=training_s2l8_8.map(function(f){return f.set("date",collection_s2_15_date_2)})
var s2l8_feature8_1=ee.Feature(training_s2l8_8.toList(10).get(0))
s2l8_feature8_1=s2l8_feature8_1.set({'waterlevel':4})
//print(s2l8_feature8_1)
//point17
var point_17=ee.Feature(roi_point.toList(60).get(16)).geometry()
var collection_s2_17= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_17) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_17= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_17)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l8_17_2=ee.Image(collection_l8_17.toList(10).get(1))                  
//l8s2_9_2
var collection_s2_17_3=ee.Image(collection_s2_17.toList(10).get(2))
var collection_s2_17_date_3=collection_s2_17_3.date().format()
var feature1_l8_17_2=collection_l8_17_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_17_2=collection_s2_17_3.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result9_2 = histogramMatching(feature1_s2_17_2, feature1_l8_17_2); 
var sel_bands_s2l8_9_2 = result9_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])                  
//NDWI
var ndwi = sel_bands_s2l8_9_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_9_2=sel_bands_s2l8_9_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_9_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_9_2.select('SR_B5'),
      'R': sel_bands_s2l8_9_2.select('SR_B4'),
      'G': sel_bands_s2l8_9_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_9_2=sel_bands_s2l8_9_2.addBands(glcm)
var training_s2l8_9_2= sel_bands_s2l8_9_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_9_2=training_s2l8_9_2.map(function(f){return f.set("date",collection_s2_17_date_3)})
var s2l8_feature9_1=ee.Feature(training_s2l8_9_2.toList(10).get(0))
s2l8_feature9_1=s2l8_feature9_1.set({'waterlevel':3})
//print(s2l8_feature9_1)
//point18
var point_18=ee.Feature(roi_point.toList(60).get(17)).geometry()
var collection_s2_18= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_18) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_18= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_18)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l8_18_1=collection_l8_18.first()
//l8s2_10
var collection_s2_18_1=collection_s2_18.first()
var collection_s2_18_date_1=collection_s2_18_1.date().format()
var feature1_l8_18=collection_l8_18_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_18=collection_s2_18_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result10 = histogramMatching(feature1_s2_18, feature1_l8_18); 
var sel_bands_s2l8_10 = result10.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_10.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_10=sel_bands_s2l8_10.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_10.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_10.select('SR_B5'),
      'R': sel_bands_s2l8_10.select('SR_B4'),
      'G': sel_bands_s2l8_10.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_10=sel_bands_s2l8_10.addBands(glcm)
var training_s2l8_10= sel_bands_s2l8_10.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_10=training_s2l8_10.map(function(f){return f.set("date",collection_s2_18_date_1)})
var s2l8_feature10_1=ee.Feature(training_s2l8_10.toList(10).get(0))
s2l8_feature10_1=s2l8_feature10_1.set({'waterlevel':2})
//print(s2l8_feature10_1)
//point20
var point_20=ee.Feature(roi_point.toList(60).get(19)).geometry()
var collection_s2_20= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_20) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_s2_20_2=ee.Image(collection_s2_20.toList(20).get(1))
var collection_s2_20_date_2=collection_s2_20_2.date().format()
var collection_s2_20_4=ee.Image(collection_s2_20.toList(20).get(3))
var collection_s2_20_date_4=collection_s2_20_4.date().format()
var collection_s2_20_9=ee.Image(collection_s2_20.toList(20).get(8))
var collection_s2_20_date_9=collection_s2_20_9.date().format()
var collection_l8_20= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_20)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l8_20_1=collection_l8_20.first()
var collection_l8_20_2=ee.Image(collection_l8_20.toList(10).get(1))
//l8s2_11_2
var feature1_l8_20_2=collection_l8_20_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_20_2=collection_s2_20_4.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result11_2= histogramMatching(feature1_s2_20_2, feature1_l8_20_2); 
var sel_bands_s2l8_11_2 = result11_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_11_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_11_2=sel_bands_s2l8_11_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_11_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_11_2.select('SR_B5'),
      'R': sel_bands_s2l8_11_2.select('SR_B4'),
      'G': sel_bands_s2l8_11_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_11_2=sel_bands_s2l8_11_2.addBands(glcm)
var training_s2l8_11_2= sel_bands_s2l8_11_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_11_2=training_s2l8_11_2.map(function(f){return f.set("date",collection_s2_20_date_4)})
var s2l8_feature11_2=ee.Feature(training_s2l8_11_2.toList(10).get(0))
s2l8_feature11_2=s2l8_feature11_2.set({'waterlevel':3})
//print(s2l8_feature11_2)
//l8s2_11_3
var feature1_l8_20_3=collection_l8_20_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_20_3=collection_s2_20_9.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result11_3= histogramMatching(feature1_s2_20_3, feature1_l8_20_3); 
var sel_bands_s2l8_11_3 = result11_3.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_11_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_11_3=sel_bands_s2l8_11_3.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_11_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_11_3.select('SR_B5'),
      'R': sel_bands_s2l8_11_3.select('SR_B4'),
      'G': sel_bands_s2l8_11_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_11_3=sel_bands_s2l8_11_3.addBands(glcm)
var training_s2l8_11_3= sel_bands_s2l8_11_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_11_3=training_s2l8_11_3.map(function(f){return f.set("date",collection_s2_20_date_9)})
var s2l8_feature11_1=ee.Feature(training_s2l8_11_3.toList(10).get(0))
s2l8_feature11_1=s2l8_feature11_1.set({'waterlevel':3})
var s2l8_feature11_2_2=ee.Feature(training_s2l8_11_3.toList(10).get(1))
s2l8_feature11_2_2=s2l8_feature11_2_2.set({'waterlevel':4})
var s2l8_feature11_4=ee.Feature(training_s2l8_11_3.toList(10).get(3))
s2l8_feature11_4=s2l8_feature11_4.set({'waterlevel':3})
//print(s2l8_feature11_1,s2l8_feature11_2_2,s2l8_feature11_4)
//point25
var point_25=ee.Feature(roi_point.toList(60).get(24)).geometry()
var collection_s2_25= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_25) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_25= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_25)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序                  
var collection_l8_25_1=collection_l8_25.first()
var collection_l8_25_date_1=collection_l8_25_1.date().format()
var collection_s2_25_4=ee.Image(collection_s2_25.toList(10).get(3))
var collection_s2_25_date_4=collection_s2_25_4.date().format()
var collection_l8_25_2=ee.Image(collection_l8_25.toList(10).get(1))
var collection_l8_25_date_2=collection_l8_25_2.date().format()
var collection_s2_25_1=collection_s2_25.first()
var collection_s2_25_date_1=collection_s2_25_1.date().format()
var collection_l8_25_3=ee.Image(collection_l8_25.toList(10).get(2))
var collection_l8_25_date_3=collection_l8_25_3.date().format()
var collection_l8_25_4=ee.Image(collection_l8_25.toList(10).get(3))
var collection_l8_25_date_4=collection_l8_25_4.date().format()
var collection_s2_25_3=ee.Image(collection_s2_25.toList(10).get(2))
var collection_s2_25_date_3=collection_s2_25_3.date().format()
//l8s2_13_1
var feature1_l8_25_1=collection_l8_25_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_25_4=collection_s2_25_4.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result13_1= histogramMatching(feature1_s2_25_4, feature1_l8_25_1); 
var sel_bands_s2l8_13_1= result13_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_13_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_13_1=sel_bands_s2l8_13_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_13_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_13_1.select('SR_B5'),
      'R': sel_bands_s2l8_13_1.select('SR_B4'),
      'G': sel_bands_s2l8_13_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_13_1=sel_bands_s2l8_13_1.addBands(glcm)
var training_s2l8_13_1= sel_bands_s2l8_13_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_13_1=training_s2l8_13_1.map(function(f){return f.set("date",collection_s2_25_date_4)})
var s2l8_feature13_1=ee.Feature(training_s2l8_13_1.toList(10).get(0))
s2l8_feature13_1=s2l8_feature13_1.set({'waterlevel':5})
//print(s2l8_feature13_1)
//l8s2_13_2
var feature1_l8_25_2=collection_l8_25_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_25_1=collection_s2_25_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result13_2= histogramMatching(feature1_s2_25_1, feature1_l8_25_2); 
var sel_bands_s2l8_13_2= result13_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_13_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_13_2=sel_bands_s2l8_13_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_13_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_13_2.select('SR_B5'),
      'R': sel_bands_s2l8_13_2.select('SR_B4'),
      'G': sel_bands_s2l8_13_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_13_2=sel_bands_s2l8_13_2.addBands(glcm)
var training_s2l8_13_2= sel_bands_s2l8_13_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_13_2=training_s2l8_13_2.map(function(f){return f.set("date",collection_s2_25_date_1)})
var s2l8_feature13_2=ee.Feature(training_s2l8_13_2.toList(10).get(0))
s2l8_feature13_2=s2l8_feature13_2.set({'waterlevel':4})
var s2l8_feature13_3=ee.Feature(training_s2l8_13_2.toList(10).get(1))
s2l8_feature13_3=s2l8_feature13_3.set({'waterlevel':4})
var s2l8_feature13_4=ee.Feature(training_s2l8_13_2.toList(10).get(2))
s2l8_feature13_4=s2l8_feature13_4.set({'waterlevel':4})
var s2l8_feature13_5=ee.Feature(training_s2l8_13_2.toList(10).get(3))
s2l8_feature13_5=s2l8_feature13_5.set({'waterlevel':4})
//print(s2l8_feature13_2,s2l8_feature13_3,s2l8_feature13_4,s2l8_feature13_5)
//point26
var point_27=ee.Feature(roi_point.toList(60).get(26)).geometry()
var collection_s2_27= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_27) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_27= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_27)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序    
collection_l8_27 = collection_l8_27.select('SR_B[1-5]')                  
var collection_l8_27_1=collection_l8_27.first()
//NDWI
var ndwi = collection_l8_27_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_27_1=collection_l8_27_1.addBands(ndwi)
//GLCM
var gray = collection_l8_27_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_27_1.select('SR_B5'),
      'R': collection_l8_27_1.select('SR_B4'),
      'G': collection_l8_27_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_27_1=collection_l8_27_1.addBands(glcm)
var collection_l8_27_date_1=collection_l8_27_1.date().format()
var training_l8_27_1 = collection_l8_27_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_27_1=training_l8_27_1.map(function(f){return f.set("date",collection_l8_27_date_1)})
var feature_27_1_1=ee.Feature(training_l8_27_1.toList(10).get(0));
var feature27_1_1=feature_27_1_1.set({'waterlevel':6});
var feature_27_1_2=ee.Feature(training_l8_27_1.toList(10).get(1));
var feature27_1_2=feature_27_1_2.set({'waterlevel':null});
//print(feature27_1_1,feature27_1_2)
var collection_l8_27_2=ee.Image(collection_l8_27.toList(10).get(1))
//NDWI
var ndwi = collection_l8_27_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_27_2=collection_l8_27_2.addBands(ndwi)
//GLCM
var gray = collection_l8_27_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_27_2.select('SR_B5'),
      'R': collection_l8_27_2.select('SR_B4'),
      'G': collection_l8_27_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_27_2=collection_l8_27_2.addBands(glcm)
var collection_l8_27_date_2=collection_l8_27_2.date().format()
var training_l8_27_2 = collection_l8_27_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_27_2=training_l8_27_2.map(function(f){return f.set("date",collection_l8_27_date_2)})
var feature_27_2_1=ee.Feature(training_l8_27_2.toList(10).get(0));
var feature27_2_1=feature_27_2_1.set({'waterlevel':6});
//print(feature27_2_1)
//point32
var point_32=ee.Feature(roi_point.toList(60).get(31)).geometry()
var collection_s2_32= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_32) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_32= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_32)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序        
collection_l8_32 = collection_l8_32.select('SR_B[1-5]')                      
var collection_l8_32_1=collection_l8_32.first()
//NDWI
var ndwi = collection_l8_32_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_32_1=collection_l8_32_1.addBands(ndwi)
//GLCM
var gray = collection_l8_32_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_32_1.select('SR_B5'),
      'R': collection_l8_32_1.select('SR_B4'),
      'G': collection_l8_32_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_32_1=collection_l8_32_1.addBands(glcm)
var collection_l8_32_date_1=collection_l8_32_1.date().format()
var collection_s2_32_2=ee.Image(collection_s2_32.toList(10).get(1))
var collection_s2_32_date_2=collection_s2_32_2.date().format()
var training_l8_32_1 = collection_l8_32_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_32_1=training_l8_32_1.map(function(f){return f.set("date",collection_l8_32_date_1)})
var feature_32_1_1=ee.Feature(training_l8_32_1.toList(10).get(0));
var feature32_1_1=feature_32_1_1.set({'waterlevel':null});
var feature_32_1_2=ee.Feature(training_l8_32_1.toList(10).get(1));
var feature32_1_2=feature_32_1_2.set({'waterlevel':6});
//print(feature32_1_1,feature32_1_2)
var collection_l8_32_2=ee.Image(collection_l8_32.toList(10).get(1))
//NDWI
var ndwi = collection_l8_32_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_32_2=collection_l8_32_2.addBands(ndwi)
//GLCM
var gray = collection_l8_32_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_32_2.select('SR_B5'),
      'R': collection_l8_32_2.select('SR_B4'),
      'G': collection_l8_32_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_32_2=collection_l8_32_2.addBands(glcm)
var collection_l8_32_date_2=collection_l8_32_2.date().format()
var training_l8_32_2 = collection_l8_32_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_32_2=training_l8_32_2.map(function(f){return f.set("date",collection_l8_32_date_2)})
var feature_32_2_1=ee.Feature(training_l8_32_2.toList(10).get(0));
var feature32_2_1=feature_32_2_1.set({'waterlevel':null});
var feature_32_2_2=ee.Feature(training_l8_32_2.toList(10).get(1));
var feature32_2_2=feature_32_2_2.set({'waterlevel':6});
//print(feature32_2_1,feature32_2_2)
//point33
var point_33=ee.Feature(roi_point.toList(60).get(32)).geometry()
var collection_s2_33= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_33) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_33= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_33)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序  
collection_l8_33 = collection_l8_33.select('SR_B[1-5]')
var collection_l8_33_1=collection_l8_33.first()
//NDWI
var ndwi = collection_l8_33_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_33_1=collection_l8_33_1.addBands(ndwi)
//GLCM
var gray = collection_l8_33_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_33_1.select('SR_B5'),
      'R': collection_l8_33_1.select('SR_B4'),
      'G': collection_l8_33_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_33_1=collection_l8_33_1.addBands(glcm)
var collection_l8_33_date_1=collection_l8_33_1.date().format()
var training_l8_33_1 = collection_l8_33_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_33_1=training_l8_33_1.map(function(f){return f.set("date",collection_l8_33_date_1)})
var feature_33_1_1=ee.Feature(training_l8_33_1.toList(10).get(0));
var feature33_1_1=feature_33_1_1.set({'waterlevel':4});
//print(feature33_1_1)
var collection_l8_33_2=ee.Image(collection_l8_33.toList(10).get(1))
//NDWI
var ndwi = collection_l8_33_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_33_2=collection_l8_33_2.addBands(ndwi)
//GLCM
var gray = collection_l8_33_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_33_2.select('SR_B5'),
      'R': collection_l8_33_2.select('SR_B4'),
      'G': collection_l8_33_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_33_2=collection_l8_33_2.addBands(glcm)
var collection_l8_33_date_2=collection_l8_33_2.date().format()
var training_l8_33_2 = collection_l8_33_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_33_2=training_l8_33_2.map(function(f){return f.set("date",collection_l8_33_date_2)})
var feature_33_2_1=ee.Feature(training_l8_33_2.toList(10).get(0));
var feature33_2_1=feature_33_2_1.set({'waterlevel':4});
var feature_33_2_2=ee.Feature(training_l8_33_2.toList(10).get(1));
var feature33_2_2=feature_33_2_2.set({'waterlevel':2});
//print(feature33_2_1,feature33_2_2)
//l8s2_15_2
var collection_l8_33_2=ee.Image(collection_l8_33.toList(10).get(1))
var collection_l8_33_date_2=collection_l8_33_2.date().format()
var collection_s2_33_2=ee.Image(collection_s2_33.toList(10).get(1))
var collection_s2_33_date_2=collection_s2_33_2.date().format()
var feature1_s2_33_2=collection_s2_33_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var feature1_l8_33_2=collection_l8_33_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result15_2= histogramMatching(feature1_s2_33_2, feature1_l8_33_2); 
var sel_bands_s2l8_15_2= result15_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_15_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_15_2=sel_bands_s2l8_15_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_15_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_15_2.select('SR_B5'),
      'R': sel_bands_s2l8_15_2.select('SR_B4'),
      'G': sel_bands_s2l8_15_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_15_2=sel_bands_s2l8_15_2.addBands(glcm)
var training_s2l8_15_2= sel_bands_s2l8_15_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_15_2=training_s2l8_15_2.map(function(f){return f.set("date",collection_s2_33_date_2)})
var s2l8_feature15_2=ee.Feature(training_s2l8_15_2.toList(10).get(0))
s2l8_feature15_2=s2l8_feature15_2.set({'waterlevel':4})
//print(s2l8_feature15_2)
var collection_l8_33_3=ee.Image(collection_l8_33.toList(10).get(2))
var collection_l8_33_date_3=collection_l8_33_3.date().format()
var collection_s2_33_4=ee.Image(collection_s2_33.toList(10).get(3))
var collection_s2_33_date_4=collection_s2_33_4.date().format()
//NDWI
var ndwi = collection_l8_33_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_33_3=collection_l8_33_3.addBands(ndwi)
//GLCM
var gray = collection_l8_33_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_33_3.select('SR_B5'),
      'R': collection_l8_33_3.select('SR_B4'),
      'G': collection_l8_33_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_33_3=collection_l8_33_3.addBands(glcm)
var training_l8_33_3 = collection_l8_33_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_33_3=training_l8_33_3.map(function(f){return f.set("date",collection_l8_33_date_3)})
var feature_33_3_1=ee.Feature(training_l8_33_3.toList(10).get(0));
var feature33_3_1=feature_33_3_1.set({'waterlevel':2});
//print(feature33_3_1)
//l8s2_15_3
var feature1_l8_33_3=collection_l8_33_3.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_33_4=collection_s2_33_4.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result15_3= histogramMatching(feature1_s2_33_4, feature1_l8_33_3); 
var sel_bands_s2l8_15_3= result15_3.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_15_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_15_3=sel_bands_s2l8_15_3.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_15_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_15_3.select('SR_B5'),
      'R': sel_bands_s2l8_15_3.select('SR_B4'),
      'G': sel_bands_s2l8_15_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_15_3=sel_bands_s2l8_15_3.addBands(glcm)
var training_s2l8_15_3= sel_bands_s2l8_15_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_15_3=training_s2l8_15_3.map(function(f){return f.set("date",collection_s2_33_date_4)})
var s2l8_feature15_3=ee.Feature(training_s2l8_15_3.toList(10).get(0))
s2l8_feature15_3=s2l8_feature15_3.set({'waterlevel':4})

//print(s2l8_feature15_3)
//point34
var point_34=ee.Feature(roi_point.toList(60).get(33)).geometry()
var collection_s2_34= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_34) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_34= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_34)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序          
collection_l8_34 = collection_l8_34.select('SR_B[1-5]')
var collection_l8_34_1=collection_l8_34.first()
//NDWI
var ndwi = collection_l8_34_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_34_1=collection_l8_34_1.addBands(ndwi)
//GLCM
var gray = collection_l8_34_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_34_1.select('SR_B5'),
      'R': collection_l8_34_1.select('SR_B4'),
      'G': collection_l8_34_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_34_1=collection_l8_34_1.addBands(glcm)
var collection_l8_34_date_1=collection_l8_34_1.date().format()
var training_l8_34_1 = collection_l8_34_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_34_1=training_l8_34_1.map(function(f){return f.set("date",collection_l8_34_date_1)})
var feature_34_1=ee.Feature(training_l8_34_1.toList(10).get(0));
var feature34_1=feature_34_1.set({'waterlevel':3});
//print(feature34_1)
var collection_l8_34_3=ee.Image(collection_l8_34.toList(10).get(2))
//NDWI
var ndwi = collection_l8_34_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_34_3=collection_l8_34_3.addBands(ndwi)
//GLCM
var gray = collection_l8_34_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_34_3.select('SR_B5'),
      'R': collection_l8_34_3.select('SR_B4'),
      'G': collection_l8_34_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_34_3=collection_l8_34_3.addBands(glcm)
var collection_l8_34_date_3=collection_l8_34_3.date().format()
var training_l8_34_3 = collection_l8_34_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_34_3=training_l8_34_3.map(function(f){return f.set("date",collection_l8_34_date_3)})
var feature_34_3=ee.Feature(training_l8_34_3.toList(10).get(0));
var feature34_3=feature_34_3.set({'waterlevel':3});
//print(feature34_3)
//l8s2_16_2
var collection_s2_34_1=collection_s2_34.first()
var collection_s2_34_date_1=collection_s2_34_1.date().format()
var feature1_s2_34_1=collection_s2_34_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var feature1_l8_34_3=collection_l8_34_3.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var result16_2= histogramMatching(feature1_s2_34_1, feature1_l8_34_3); 
var sel_bands_s2l8_16_2= result16_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l8_16_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l8_16_2=sel_bands_s2l8_16_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l8_16_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l8_16_2.select('SR_B5'),
      'R': sel_bands_s2l8_16_2.select('SR_B4'),
      'G': sel_bands_s2l8_16_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l8_16_2=sel_bands_s2l8_16_2.addBands(glcm)
var training_s2l8_16_2= sel_bands_s2l8_16_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l8_16_2=training_s2l8_16_2.map(function(f){return f.set("date",collection_s2_34_date_1)})
var s2l8_feature16_3=ee.Feature(training_s2l8_16_2.toList(10).get(0))
s2l8_feature16_3=s2l8_feature16_3.set({'waterlevel':3})
//print(s2l8_feature16_3)
var collection_l8_34_4=ee.Image(collection_l8_34.toList(10).get(3))
//NDWI
var ndwi = collection_l8_34_4.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_34_4=collection_l8_34_4.addBands(ndwi)
//GLCM
var gray = collection_l8_34_4.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_34_4.select('SR_B5'),
      'R': collection_l8_34_4.select('SR_B4'),
      'G': collection_l8_34_4.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_34_4=collection_l8_34_4.addBands(glcm)
var collection_l8_34_date_4=collection_l8_34_4.date().format()
var training_l8_34_4 = collection_l8_34_4.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_34_4=training_l8_34_4.map(function(f){return f.set("date",collection_l8_34_date_4)})
var feature_34_4=ee.Feature(training_l8_34_4.toList(10).get(0));
var feature34_4=feature_34_4.set({'waterlevel':2});
//print(feature34_4)
var collection_l8_34_5=ee.Image(collection_l8_34.toList(10).get(4))
//NDWI
var ndwi = collection_l8_34_5.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_34_5=collection_l8_34_5.addBands(ndwi)
//GLCM
var gray = collection_l8_34_5.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_34_5.select('SR_B5'),
      'R': collection_l8_34_5.select('SR_B4'),
      'G': collection_l8_34_5.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_34_5=collection_l8_34_5.addBands(glcm)
var collection_l8_34_date_5=collection_l8_34_5.date().format()
var training_l8_34_5 = collection_l8_34_5.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_34_5=training_l8_34_5.map(function(f){return f.set("date",collection_l8_34_date_5)})
var feature_34_5=ee.Feature(training_l8_34_5.toList(10).get(0));
var feature34_5=feature_34_5.set({'waterlevel':2});
//print(feature34_5)
//point36
var point_36=ee.Feature(roi_point.toList(60).get(35)).geometry()
var collection_s2_36= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_36) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l8_36= ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-6-1', '2022-8-1') //筛选日期设置
                  .filterBounds(point_36)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序      
collection_l8_36 = collection_l8_36.select('SR_B[1-5]')
var collection_l8_36_1=collection_l8_36.first()
//NDWI
var ndwi = collection_l8_36_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l8_36_1=collection_l8_36_1.addBands(ndwi)
//GLCM
var gray = collection_l8_36_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l8_36_1.select('SR_B5'),
      'R': collection_l8_36_1.select('SR_B4'),
      'G': collection_l8_36_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l8_36_1=collection_l8_36_1.addBands(glcm)
var collection_l8_36_date_1=collection_l8_36_1.date().format()
var training_l8_36_1 = collection_l8_36_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l8_36_1=training_l8_36_1.map(function(f){return f.set("date",collection_l8_36_date_1)})
var feature_36_1=ee.Feature(training_l8_36_1.toList(10).get(0));
var feature36_1=feature_36_1.set({'waterlevel':2});
//print(feature36_1)
//2022.05
//point1
var collection_s2_may_1= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_1) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_1=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_1)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序    
collection_l83_1 = collection_l83_1.select('SR_B[1-5]')
var collection_l83_1_1=collection_l83_1.first()
//NDWI
var ndwi = collection_l83_1_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_1_1=collection_l83_1_1.addBands(ndwi)
//GLCM
var gray = collection_l83_1_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_1_1.select('SR_B5'),
      'R': collection_l83_1_1.select('SR_B4'),
      'G': collection_l83_1_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l83_1_1=collection_l83_1_1.addBands(glcm)
var collection_l83_1_date_1=collection_l83_1_1.date().format()
var training_l83_1_1 = collection_l83_1_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_1_1=training_l83_1_1.map(function(f){return f.set("date",collection_l83_1_date_1)})
var l83_feature1_1=ee.Feature(training_l83_1_1.toList(10).get(0))
l83_feature1_1=l83_feature1_1.set({'waterlevel':3})
//print(l83_feature1_1)
//l8s2
var collection_s2_may_1_1=collection_s2_may_1.first()
var collection_s2_may_1_date_1=collection_s2_may_1_1.date().format()
var collection_s2_may_1_2=ee.Image(collection_s2_may_1.toList(10).get(1))
var collection_s2_may_1_date_2=collection_s2_may_1_2.date().format()
var feature1_l83_1_1=collection_l83_1_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature1_s2_may_1_1=collection_s2_may_1_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result1_may_1= histogramMatching(feature1_s2_may_1_1, feature1_l83_1_1); 
var sel_bands_s2l81_may_1= result1_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l81_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l81_may_1=sel_bands_s2l81_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l81_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l81_may_1.select('SR_B5'),
      'R': sel_bands_s2l81_may_1.select('SR_B4'),
      'G': sel_bands_s2l81_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l81_may_1=sel_bands_s2l81_may_1.addBands(glcm)
var training_s2l81_may_1= sel_bands_s2l81_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l81_may_1=training_s2l81_may_1.map(function(f){return f.set("date",collection_s2_may_1_date_1)})
var s2l81_may_1=ee.Feature(training_s2l81_may_1.toList(10).get(0))
s2l81_may_1=s2l81_may_1.set({'waterlevel':3})
//print(s2l81_may_1)
var feature1_s2_may_1_2=collection_s2_may_1_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result1_may_2= histogramMatching(feature1_s2_may_1_2, feature1_l83_1_1); 
var sel_bands_s2l81_may_2= result1_may_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l81_may_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l81_may_2=sel_bands_s2l81_may_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l81_may_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l81_may_2.select('SR_B5'),
      'R': sel_bands_s2l81_may_2.select('SR_B4'),
      'G': sel_bands_s2l81_may_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l81_may_2=sel_bands_s2l81_may_2.addBands(glcm)
var training_s2l81_may_2= sel_bands_s2l81_may_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l81_may_2=training_s2l81_may_2.map(function(f){return f.set("date",collection_s2_may_1_date_2)})
var s2l81_may_2=ee.Feature(training_s2l81_may_2.toList(10).get(0))
s2l81_may_2=s2l81_may_2.set({'waterlevel':3})
//print(s2l81_may_2)
var collection_l83_1_2=ee.Image(collection_l83_1.toList(10).get(1))
//NDWI
var ndwi = collection_l83_1_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_1_2=collection_l83_1_2.addBands(ndwi)
//GLCM
var gray = collection_l83_1_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_1_2.select('SR_B5'),
      'R': collection_l83_1_2.select('SR_B4'),
      'G': collection_l83_1_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l83_1_2=collection_l83_1_2.addBands(glcm)
var collection_l83_1_date_2=collection_l83_1_2.date().format()
var training_l83_1_2= collection_l83_1_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_1_2=training_l83_1_2.map(function(f){return f.set("date",collection_l83_1_date_2)})
var l83_feature1_2=ee.Feature(training_l83_1_2.toList(10).get(0))
l83_feature1_2=l83_feature1_2.set({'waterlevel':3})
//print(l83_feature1_2)
//point5
var collection_s2_may_5= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_5) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_5=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_5)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序  
collection_l83_5 = collection_l83_5.select('SR_B[1-5]')
var collection_l83_5_2=ee.Image(collection_l83_5.toList(10).get(1))                  
 //NDWI
var ndwi = collection_l83_5_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_5_2=collection_l83_5_2.addBands(ndwi)
//GLCM
var gray = collection_l83_5_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_5_2.select('SR_B5'),
      'R': collection_l83_5_2.select('SR_B4'),
      'G': collection_l83_5_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l83_5_2=collection_l83_5_2.addBands(glcm)                 
var collection_l83_5_date_2=collection_l83_5_2.date().format()
var training_l83_5_2= collection_l83_5_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_5_2=training_l83_5_2.map(function(f){return f.set("date",collection_l83_5_date_2)})
var l83_feature5_2_5=ee.Feature(training_l83_5_2.toList(10).get(4))
l83_feature5_2_5=l83_feature5_2_5.set({'waterlevel':3})                  
//print(l83_feature5_2_5)                  
var collection_l83_5_3=ee.Image(collection_l83_5.toList(10).get(2))                  
//NDWI
var ndwi = collection_l83_5_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_5_3=collection_l83_5_3.addBands(ndwi)
//GLCM
var gray = collection_l83_5_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_5_3.select('SR_B5'),
      'R': collection_l83_5_3.select('SR_B4'),
      'G': collection_l83_5_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
collection_l83_5_3=collection_l83_5_3.addBands(glcm)                    

var collection_l83_5_date_3=collection_l83_5_3.date().format()
var training_l83_5_3= collection_l83_5_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_5_3=training_l83_5_3.map(function(f){return f.set("date",collection_l83_5_date_3)})
var l83_feature5_3_5=ee.Feature(training_l83_5_3.toList(10).get(4))
l83_feature5_3_5=l83_feature5_3_5.set({'waterlevel':3})                  
//print(l83_feature5_3_5)                 
 //s2l8
var collection_s2_may_5_2=ee.Image(collection_s2_may_5.toList(10).get(1))
var collection_s2_may_5_date_2=collection_s2_may_5_2.date().format()
var feature2_l83_5_2=collection_l83_5_3.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature2_s2_may_5_2=collection_s2_may_5_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result2_may_2= histogramMatching(feature2_s2_may_5_2, feature2_l83_5_2); 
var sel_bands_s2l82_may_2= result2_may_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])                 
//NDWI
var ndwi = sel_bands_s2l82_may_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l82_may_2=sel_bands_s2l82_may_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l82_may_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l82_may_2.select('SR_B5'),
      'R': sel_bands_s2l82_may_2.select('SR_B4'),
      'G': sel_bands_s2l82_may_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
 
sel_bands_s2l82_may_2=sel_bands_s2l82_may_2.addBands(glcm)                               
var training_s2l82_may_2= sel_bands_s2l82_may_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l82_may_2=training_s2l82_may_2.map(function(f){return f.set("date",collection_s2_may_5_date_2)})
var s2l82_may_2=ee.Feature(training_s2l82_may_2.toList(10).get(0))
s2l82_may_2=s2l82_may_2.set({'waterlevel':4})                  
//print(s2l82_may_2)                  
//point9
var point_9=ee.Feature(roi_point.toList(60).get(8)).geometry()
var collection_l83_9=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_9)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序                      
collection_l83_9 = collection_l83_9.select('SR_B[1-5]')                  
var collection_l83_9_1=collection_l83_9.first()
//NDWI
var ndwi = collection_l83_9_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_9_1=collection_l83_9_1.addBands(ndwi)
//GLCM
var gray = collection_l83_9_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_9_1.select('SR_B5'),
      'R': collection_l83_9_1.select('SR_B4'),
      'G': collection_l83_9_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_9_1=collection_l83_9_1.addBands(glcm) 

var collection_l83_9_date_1=collection_l83_9_1.date().format()
var training_l83_9_1= collection_l83_9_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_9_1=training_l83_9_1.map(function(f){return f.set("date",collection_l83_9_date_1)})
var l83_feature9_1=ee.Feature(training_l83_9_1.toList(10).get(0))
l83_feature9_1=l83_feature9_1.set({'waterlevel':4})                  
//print(l83_feature9_1)                 
//point10
var collection_s2_may_10= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_10) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_10=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_10)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序                     
var collection_l83_10_1=collection_l83_10.first()
//l8s2
var collection_s2_may_10_1=collection_s2_may_10.first()
var collection_s2_may_10_date_1=collection_s2_may_10_1.date().format()
var feature3_l83_10_1=collection_l83_10_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature3_s2_may_10_1=collection_s2_may_10_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result3_may_1= histogramMatching(feature3_s2_may_10_1, feature3_l83_10_1); 
var sel_bands_s2l83_may_1= result3_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])                  
//NDWI
var ndwi = sel_bands_s2l83_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l83_may_1=sel_bands_s2l83_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l83_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l83_may_1.select('SR_B5'),
      'R': sel_bands_s2l83_may_1.select('SR_B4'),
      'G': sel_bands_s2l83_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l83_may_1=sel_bands_s2l83_may_1.addBands(glcm) 

var training_s2l83_may_1= sel_bands_s2l83_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l83_may_1=training_s2l83_may_1.map(function(f){return f.set("date",collection_s2_may_10_date_1)})
var s2l83_may_2=ee.Feature(training_s2l83_may_1.toList(10).get(1))
s2l83_may_2=s2l83_may_2.set({'waterlevel':4})          
//print(s2l83_may_2)                 
//point11
var point_11=ee.Feature(roi_point.toList(60).get(10)).geometry()
var collection_s2_may_11= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_11) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_11=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_11)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序                      
collection_l83_11 = collection_l83_11.select('SR_B[1-5]')                  
var collection_l83_11_1=collection_l83_11.first()                  
//NDWI
var ndwi = collection_l83_11_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_11_1=collection_l83_11_1.addBands(ndwi)
//GLCM
var gray = collection_l83_11_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_11_1.select('SR_B5'),
      'R': collection_l83_11_1.select('SR_B4'),
      'G': collection_l83_11_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_11_1=collection_l83_11_1.addBands(glcm) 
var collection_l83_11_date_1=collection_l83_11_1.date().format()
var training_l83_11_1= collection_l83_11_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_11_1=training_l83_11_1.map(function(f){return f.set("date",collection_l83_11_date_1)})
var l83_feature11_1=ee.Feature(training_l83_11_1.toList(10).get(1))
l83_feature11_1=l83_feature11_1.set({'waterlevel':4})                  
//print(l83_feature11_1)                  
//l8s2
var collection_s2_may_11_1=collection_s2_may_11.first()
var collection_s2_may_11_date_1=collection_s2_may_11_1.date().format()
var feature4_l83_11_1=collection_l83_11_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature4_s2_may_11_1=collection_s2_may_11_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result4_may_1= histogramMatching(feature4_s2_may_11_1, feature4_l83_11_1); 
var sel_bands_s2l84_may_1= result4_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l84_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l84_may_1=sel_bands_s2l84_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l84_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l84_may_1.select('SR_B5'),
      'R': sel_bands_s2l84_may_1.select('SR_B4'),
      'G': sel_bands_s2l84_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l84_may_1=sel_bands_s2l84_may_1.addBands(glcm) 

var training_s2l84_may_1= sel_bands_s2l84_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l84_may_1=training_s2l84_may_1.map(function(f){return f.set("date",collection_s2_may_11_date_1)})
var s2l84_may_1=ee.Feature(training_s2l84_may_1.toList(10).get(0))
s2l84_may_1=s2l84_may_1.set({'waterlevel':4})
//print(s2l84_may_1)
//point15
var collection_s2_may_15= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_15) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_15=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_15)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序  
collection_l83_11 = collection_l83_11.select('SR_B[1-5]')   
var collection_l83_15_1=collection_l83_15.first()
//NDWI
var ndwi = collection_l83_15_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_15_1=collection_l83_15_1.addBands(ndwi)
//GLCM
var gray = collection_l83_15_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_15_1.select('SR_B5'),
      'R': collection_l83_15_1.select('SR_B4'),
      'G': collection_l83_15_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_15_1=collection_l83_15_1.addBands(glcm) 

var collection_l83_15_date_1=collection_l83_15_1.date().format()
var training_l83_15_1= collection_l83_15_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_15_1=training_l83_15_1.map(function(f){return f.set("date",collection_l83_15_date_1)})
var l83_feature15_1=ee.Feature(training_l83_15_1.toList(10).get(0))
l83_feature15_1=l83_feature15_1.set({'waterlevel':3})
//print(l83_feature15_1)
//l8s2
var collection_s2_may_15_2=ee.Image(collection_s2_may_15.toList(10).get(1))
var collection_s2_may_15_date_2=collection_s2_may_15_2.date().format()
var feature5_l83_15_1=collection_l83_15_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature5_s2_may_15_2=collection_s2_may_15_2.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result5_may_1= histogramMatching(feature5_s2_may_15_2, feature5_l83_15_1); 
var sel_bands_s2l85_may_1= result5_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l85_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l85_may_1=sel_bands_s2l85_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l85_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l85_may_1.select('SR_B5'),
      'R': sel_bands_s2l85_may_1.select('SR_B4'),
      'G': sel_bands_s2l85_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l85_may_1=sel_bands_s2l85_may_1.addBands(glcm) 

var training_s2l85_may_1= sel_bands_s2l85_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l85_may_1=training_s2l85_may_1.map(function(f){return f.set("date",collection_s2_may_15_date_2)})
var s2l85_may_1=ee.Feature(training_s2l85_may_1.toList(10).get(0))
s2l85_may_1=s2l85_may_1.set({'waterlevel':3})
//print(s2l85_may_1)
//point20
var collection_s2_may_20= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_20) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_20=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_20)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l83_20_2=ee.Image(collection_l83_20.toList(10).get(1))
//l8s2
var collection_s2_may_20_10=ee.Image(collection_s2_may_20.toList(10).get(9))
var collection_s2_may_20_date_10=collection_s2_may_20_10.date().format()
var feature6_l83_20_2=collection_l83_20_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature6_s2_may_20_10=collection_s2_may_20_10.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result6_may_1= histogramMatching(feature6_s2_may_20_10, feature6_l83_20_2); 
var sel_bands_s2l86_may_1= result6_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l86_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l86_may_1=sel_bands_s2l86_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l86_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l86_may_1.select('SR_B5'),
      'R': sel_bands_s2l86_may_1.select('SR_B4'),
      'G': sel_bands_s2l86_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l86_may_1=sel_bands_s2l86_may_1.addBands(glcm) 
var training_s2l86_may_1= sel_bands_s2l86_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l86_may_1=training_s2l86_may_1.map(function(f){return f.set("date",collection_s2_may_20_date_10)})
var s2l86_may_1=ee.Feature(training_s2l86_may_1.toList(10).get(3))
s2l86_may_1=s2l86_may_1.set({'waterlevel':3})
//print(s2l86_may_1)
//point21
var point_21=ee.Feature(roi_point.toList(60).get(20)).geometry()
var collection_s2_may_21= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_21) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_21=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_21)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l83_21_2=ee.Image(collection_l83_21.toList(10).get(1))
//l8s2
var feature7_l83_21_2=collection_l83_21_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var collection_s2_may_21_11=ee.Image(collection_s2_may_21.toList(15).get(10))
var collection_s2_may_21_date_11=collection_s2_may_21_11.date().format()
var feature7_s2_may_21_11=collection_s2_may_21_11.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result7_may_3= histogramMatching(feature7_s2_may_21_11, feature7_l83_21_2); 
var sel_bands_s2l87_may_3= result7_may_3.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])                  
//NDWI
var ndwi = sel_bands_s2l87_may_3.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l87_may_3=sel_bands_s2l87_may_3.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l87_may_3.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l87_may_3.select('SR_B5'),
      'R': sel_bands_s2l87_may_3.select('SR_B4'),
      'G': sel_bands_s2l87_may_3.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l87_may_3=sel_bands_s2l87_may_3.addBands(glcm) 
var training_s2l87_may_3= sel_bands_s2l87_may_3.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l87_may_3=training_s2l87_may_3.map(function(f){return f.set("date",collection_s2_may_21_date_11)})
var s2l87_may_3=ee.Feature(training_s2l87_may_3.toList(10).get(2))
s2l87_may_3=s2l87_may_3.set({'waterlevel':3})
//print(s2l87_may_3)
var collection_s2_may_21_13=ee.Image(collection_s2_may_21.toList(15).get(12))
var collection_s2_may_21_date_13=collection_s2_may_21_13.date().format()
var feature7_s2_may_21_13=collection_s2_may_21_13.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result7_may_4= histogramMatching(feature7_s2_may_21_13, feature7_l83_21_2); 
var sel_bands_s2l87_may_4= result7_may_4.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l87_may_4.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l87_may_4=sel_bands_s2l87_may_4.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l87_may_4.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l87_may_4.select('SR_B5'),
      'R': sel_bands_s2l87_may_4.select('SR_B4'),
      'G': sel_bands_s2l87_may_4.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l87_may_4=sel_bands_s2l87_may_4.addBands(glcm) 

var training_s2l87_may_4= sel_bands_s2l87_may_4.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l87_may_4=training_s2l87_may_4.map(function(f){return f.set("date",collection_s2_may_21_date_13)})
var s2l87_may_4=ee.Feature(training_s2l87_may_4.toList(10).get(3))
s2l87_may_4=s2l87_may_4.set({'waterlevel':3})
//print(s2l87_may_4)
//point24
var point_24=ee.Feature(roi_point.toList(60).get(23)).geometry()
var collection_s2_may_24= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_24) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_24=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_24)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l83_24 = collection_l83_24.select('SR_B[1-5]')
var collection_l83_24_1=collection_l83_24.first()
//NDWI
var ndwi = collection_l83_24_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_24_1=collection_l83_24_1.addBands(ndwi)
//GLCM
var gray = collection_l83_24_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_24_1.select('SR_B5'),
      'R': collection_l83_24_1.select('SR_B4'),
      'G': collection_l83_24_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_24_1=collection_l83_24_1.addBands(glcm) 
var collection_l83_24_date_1=collection_l83_24_1.date().format()
var training_l83_24_1= collection_l83_24_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_24_1=training_l83_24_1.map(function(f){return f.set("date",collection_l83_24_date_1)})
var l83_feature24_2=ee.Feature(training_l83_24_1.toList(10).get(1))
l83_feature24_2=l83_feature24_2.set({'waterlevel':2})
var l83_feature24_3=ee.Feature(training_l83_24_1.toList(10).get(2))
l83_feature24_3=l83_feature24_3.set({'waterlevel':3})
var l83_feature24_5=ee.Feature(training_l83_24_1.toList(10).get(4))
l83_feature24_5=l83_feature24_5.set({'waterlevel':2})
//print(l83_feature24_2,l83_feature24_3,l83_feature24_5)
//point25
var collection_s2_may_25= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_25) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_25=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_25)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l83_25_3=ee.Image(collection_l83_25.toList(10).get(2))
var collection_l83_25_5=ee.Image(collection_l83_25.toList(10).get(4))
//l8s2
var collection_s2_may_25_3=ee.Image(collection_s2_may_25.toList(10).get(2))
var collection_s2_may_25_date_3=collection_s2_may_25_3.date().format()
var feature8_s2_may_25_3=collection_s2_may_25_3.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var feature8_l83_25_5=collection_l83_25_5.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var result8_may_2= histogramMatching(feature8_s2_may_25_3, feature8_l83_25_5); 
var sel_bands_s2l88_may_2= result8_may_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l88_may_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l88_may_2=sel_bands_s2l88_may_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l88_may_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l88_may_2.select('SR_B5'),
      'R': sel_bands_s2l88_may_2.select('SR_B4'),
      'G': sel_bands_s2l88_may_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l88_may_2=sel_bands_s2l88_may_2.addBands(glcm) 
var training_s2l88_may_2= sel_bands_s2l88_may_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l88_may_2=training_s2l88_may_2.map(function(f){return f.set("date",collection_s2_may_25_date_3)})
var s2l88_may_2=ee.Feature(training_s2l88_may_2.toList(10).get(2))
s2l88_may_2=s2l88_may_2.set({'waterlevel':3})
//print(s2l88_may_2)
//point27
var collection_l83_27=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_27)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l83_27 = collection_l83_27.select('SR_B[1-5]')
var collection_l83_27_1=collection_l83_27.first()
//NDWI
var ndwi = collection_l83_27_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_27_1=collection_l83_27_1.addBands(ndwi)
//GLCM
var gray = collection_l83_27_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_27_1.select('SR_B5'),
      'R': collection_l83_27_1.select('SR_B4'),
      'G': collection_l83_27_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_27_1=collection_l83_27_1.addBands(glcm) 

var collection_l83_27_date_1=collection_l83_27_1.date().format()
var training_l83_27_1= collection_l83_27_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_27_1=training_l83_27_1.map(function(f){return f.set("date",collection_l83_27_date_1)})
var l83_feature27_1=ee.Feature(training_l83_27_1.toList(10).get(0))
l83_feature27_1=l83_feature27_1.set({'waterlevel':3})
var l83_feature27_2=ee.Feature(training_l83_27_1.toList(10).get(1))
l83_feature27_2=l83_feature27_2.set({'waterlevel':2})
var l83_feature27_4=ee.Feature(training_l83_27_1.toList(10).get(3))
l83_feature27_4=l83_feature27_4.set({'waterlevel':2})
//print(l83_feature27_1,l83_feature27_2,l83_feature27_4)
//point28
var point_28=ee.Feature(roi_point.toList(60).get(27)).geometry()
var collection_l83_28=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_28)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l83_27 = collection_l83_27.select('SR_B[1-5]')
var collection_l83_28_1=collection_l83_28.first()
//NDWI
var ndwi = collection_l83_28_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_28_1=collection_l83_28_1.addBands(ndwi)
//GLCM
var gray = collection_l83_28_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_28_1.select('SR_B5'),
      'R': collection_l83_28_1.select('SR_B4'),
      'G': collection_l83_28_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_28_1=collection_l83_28_1.addBands(glcm) 

var collection_l83_28_date_1=collection_l83_28_1.date().format()
var training_l83_28_1= collection_l83_28_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_28_1=training_l83_28_1.map(function(f){return f.set("date",collection_l83_28_date_1)})
var l83_feature28_2=ee.Feature(training_l83_28_1.toList(10).get(1))
l83_feature28_2=l83_feature28_2.set({'waterlevel':2})
var l83_feature28_3=ee.Feature(training_l83_28_1.toList(10).get(2))
l83_feature28_3=l83_feature28_3.set({'waterlevel':3})
var l83_feature28_5=ee.Feature(training_l83_28_1.toList(10).get(4))
l83_feature28_5=l83_feature28_5.set({'waterlevel':2})
//print(l83_feature28_2,l83_feature28_3,l83_feature28_5)
//point33
var collection_s2_may_33= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_33) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_33=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_33)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l83_33 = collection_l83_33.select('SR_B[1-5]')
var collection_l83_33_1=collection_l83_33.first()
//NDWI
var ndwi = collection_l83_33_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_33_1=collection_l83_33_1.addBands(ndwi)
//GLCM
var gray = collection_l83_33_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_33_1.select('SR_B5'),
      'R': collection_l83_33_1.select('SR_B4'),
      'G': collection_l83_33_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_33_1=collection_l83_33_1.addBands(glcm) 

var collection_l83_33_date_1=collection_l83_33_1.date().format()
var training_l83_33_1= collection_l83_33_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_33_1=training_l83_33_1.map(function(f){return f.set("date",collection_l83_33_date_1)})
var l83_feature33_1=ee.Feature(training_l83_33_1.toList(10).get(0))
l83_feature33_1=l83_feature33_1.set({'waterlevel':3}) 
//print(l83_feature33_1)
var collection_l83_33_2=ee.Image(collection_l83_33.toList(10).get(1))
//NDWI
var ndwi = collection_l83_33_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_33_2=collection_l83_33_2.addBands(ndwi)
//GLCM
var gray = collection_l83_33_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_33_2.select('SR_B5'),
      'R': collection_l83_33_2.select('SR_B4'),
      'G': collection_l83_33_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_33_2=collection_l83_33_2.addBands(glcm) 

var collection_l83_33_date_2=collection_l83_33_2.date().format()
var training_l83_33_2= collection_l83_33_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_33_2=training_l83_33_2.map(function(f){return f.set("date",collection_l83_33_date_2)})
var l83_feature33_3=ee.Feature(training_l83_33_2.toList(10).get(0))
l83_feature33_3=l83_feature33_3.set({'waterlevel':3}) 
//print(l83_feature33_3)
//l8s2
var collection_s2_may_33_4=ee.Image(collection_s2_may_33.toList(10).get(3))
var collection_s2_may_33_date_4=collection_s2_may_33_4.date().format()
var feature9_s2_may_33_4=collection_s2_may_33_4.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var feature9_l83_33_1=collection_l83_33_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var result9_may_1= histogramMatching(feature9_s2_may_33_4, feature9_l83_33_1); 
var sel_bands_s2l89_may_1= result9_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l89_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l89_may_1=sel_bands_s2l89_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l89_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l89_may_1.select('SR_B5'),
      'R': sel_bands_s2l89_may_1.select('SR_B4'),
      'G': sel_bands_s2l89_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l89_may_1=sel_bands_s2l89_may_1.addBands(glcm) 

var training_s2l89_may_1= sel_bands_s2l89_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l89_may_1=training_s2l89_may_1.map(function(f){return f.set("date",collection_s2_may_33_date_4)})
var s2l89_may_1=ee.Feature(training_s2l89_may_1.toList(10).get(0))
s2l89_may_1=s2l89_may_1.set({'waterlevel':3})
//print(s2l89_may_1)
var feature9_l83_33_2=collection_l83_33_2.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var result9_may_2= histogramMatching(feature9_s2_may_33_4, feature9_l83_33_2); 
var sel_bands_s2l89_may_2= result9_may_2.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l89_may_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l89_may_2=sel_bands_s2l89_may_2.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l89_may_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l89_may_2.select('SR_B5'),
      'R': sel_bands_s2l89_may_2.select('SR_B4'),
      'G': sel_bands_s2l89_may_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l89_may_2=sel_bands_s2l89_may_2.addBands(glcm) 

var training_s2l89_may_2= sel_bands_s2l89_may_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l89_may_2=training_s2l89_may_2.map(function(f){return f.set("date",collection_s2_may_33_date_4)})
var s2l89_may_2=ee.Feature(training_s2l89_may_2.toList(10).get(0))
s2l89_may_2=s2l89_may_2.set({'waterlevel':3})
//print(s2l89_may_2)
//point34
var collection_s2_may_34= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_34) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_34=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_34)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
collection_l83_34 = collection_l83_34.select('SR_B[1-5]')
var collection_l83_34_1=collection_l83_34.first()
//NDWI
var ndwi = collection_l83_34_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_34_1=collection_l83_34_1.addBands(ndwi)
//GLCM
var gray = collection_l83_34_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_34_1.select('SR_B5'),
      'R': collection_l83_34_1.select('SR_B4'),
      'G': collection_l83_34_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_34_1=collection_l83_34_1.addBands(glcm) 

var collection_l83_34_date_1=collection_l83_34_1.date().format()
var training_l83_34_1= collection_l83_34_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_34_1=training_l83_34_1.map(function(f){return f.set("date",collection_l83_34_date_1)})
var l83_feature34_1=ee.Feature(training_l83_34_1.toList(10).get(0))
l83_feature34_1=l83_feature34_1.set({'waterlevel':2}) 
//print(l83_feature34_1)
var collection_l83_34_2=ee.Image(collection_l83_34.toList(10).get(1))
//NDWI
var ndwi = collection_l83_34_2.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
collection_l83_34_2=collection_l83_34_2.addBands(ndwi)
//GLCM
var gray = collection_l83_34_2.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': collection_l83_34_2.select('SR_B5'),
      'R': collection_l83_34_2.select('SR_B4'),
      'G': collection_l83_34_2.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
collection_l83_34_2=collection_l83_34_2.addBands(glcm) 

var collection_l83_34_date_2=collection_l83_34_2.date().format()
var training_l83_34_2= collection_l83_34_2.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_l83_34_2=training_l83_34_2.map(function(f){return f.set("date",collection_l83_34_date_2)})
var l83_feature34_2=ee.Feature(training_l83_34_2.toList(10).get(0))
l83_feature34_2=l83_feature34_2.set({'waterlevel':2}) 
//print(l83_feature34_2)
//l8s2
var collection_s2_may_34_1=collection_s2_may_34.first()
var collection_s2_may_34_date_1=collection_s2_may_34_1.date().format()
var collection_l83_34_3=ee.Image(collection_l83_34.toList(10).get(2))
var feature10_l83_34_3=collection_l83_34_3.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature10_s2_may_34_1=collection_s2_may_34_1.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result10_may_1= histogramMatching(feature10_s2_may_34_1, feature10_l83_34_3); 
var sel_bands_s2l810_may_1= result10_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])
//NDWI
var ndwi = sel_bands_s2l810_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l810_may_1=sel_bands_s2l810_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l810_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l810_may_1.select('SR_B5'),
      'R': sel_bands_s2l810_may_1.select('SR_B4'),
      'G': sel_bands_s2l810_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l810_may_1=sel_bands_s2l810_may_1.addBands(glcm) 

var training_s2l810_may_1= sel_bands_s2l810_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l810_may_1=training_s2l810_may_1.map(function(f){return f.set("date",collection_s2_may_34_date_1)})
var s2l810_may_1=ee.Feature(training_s2l810_may_1.toList(10).get(0))
s2l810_may_1=s2l810_may_1.set({'waterlevel':2})
//print(s2l810_may_1)
//point35
var point_35=ee.Feature(roi_point.toList(60).get(34)).geometry()
var collection_s2_may_35= ee.ImageCollection('COPERNICUS/S2_SR') 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_35) 
                  .map(maskS2clouds)
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .sort('CLOUDY_PIXEL_PERCENTAGE')
var collection_l83_35=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-6-1') //筛选日期设置
                  .filterBounds(point_35)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序
var collection_l83_35_1=collection_l83_35.first()
var collection_s2_may_35_3=ee.Image(collection_s2_may_35.toList(10).get(2))
var collection_s2_may_35_date_3=collection_s2_may_35_3.date().format()
//l8s2
var feature11_l83_35_1=collection_l83_35_1.select(['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'], ['R', 'G', 'B','NIR','Aerosols']) 
var feature11_s2_may_35_3=collection_s2_may_35_3.divide(10000).select(["B4", "B3", "B2",'B8','B1'], ['R', 'G', 'B','NIR','Aerosols'])
var result11_may_1= histogramMatching(feature11_s2_may_35_3, feature11_l83_35_1); 
var sel_bands_s2l811_may_1= result11_may_1.select(['R','G','B','NIR','Aerosols'],['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1'])

//NDWI
var ndwi = sel_bands_s2l811_may_1.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
sel_bands_s2l811_may_1=sel_bands_s2l811_may_1.addBands(ndwi)
//GLCM
var gray = sel_bands_s2l811_may_1.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': sel_bands_s2l811_may_1.select('SR_B5'),
      'R': sel_bands_s2l811_may_1.select('SR_B4'),
      'G': sel_bands_s2l811_may_1.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
sel_bands_s2l811_may_1=sel_bands_s2l811_may_1.addBands(glcm) 

var training_s2l811_may_1= sel_bands_s2l811_may_1.sampleRegions({
'collection': roi_point,
'scale': 30,
'geometries':true
})
training_s2l811_may_1=training_s2l811_may_1.map(function(f){return f.set("date",collection_s2_may_35_date_3)})
var s2l811_may_1=ee.Feature(training_s2l811_may_1.toList(10).get(0))
s2l811_may_1=s2l811_may_1.set({'waterlevel':2})
var s2l811_may_2=ee.Feature(training_s2l811_may_1.toList(10).get(1))
s2l811_may_2=s2l811_may_2.set({'waterlevel':2})


//model
var text_feature_finally=ee.FeatureCollection([
feature1_1,feature4_1_1,feature4_1_2,feature4_1_3,feature5_3_1,
feature5_3_2,feature5_3_3,feature5_3_4,feature5_3_5,feature5_4_1,
feature5_4_2,feature5_4_3,feature6_1_1,feature6_1_2,feature8_2_1,
feature8_2_2,feature10_1_1,feature12_1_1,feature12_1_2,feature12_1_3,
feature13_1_1,feature13_1_2,feature15_1_1,feature15_1_2,feature15_1_3,
feature27_1_1,feature27_1_2,feature27_2_1,feature32_1_1,feature32_1_2,
feature33_1_1,feature33_2_1,feature33_2_2,feature33_3_1,
feature34_1,feature34_4,feature34_5,feature36_1,l83_feature1_1,
l83_feature1_2,l83_feature5_2_5,l83_feature5_3_5,l83_feature9_1,
l83_feature11_1,l83_feature15_1,l83_feature24_2,l83_feature24_3,
l83_feature24_5,l83_feature27_1,l83_feature27_2,l83_feature27_4,
l83_feature28_2,l83_feature28_3,l83_feature28_5,l83_feature33_1,
l83_feature33_3,l83_feature34_1,l83_feature34_2,feature13_2_2,
feature13_3_1,feature13_3_2,feature13_3_3,feature13_3_4,feature32_2_1,feature32_2_2,

s2l8_feature1_1,s2l8_feature2_1,s2l8_feature8_1,s2l8_feature11_2_2,
s2l8_feature15_2,s2l8_feature16_3,
s2l8_feature3_1,s2l8_feature3_2,s2l8_feature4_1,s2l8_feature7_1,
s2l8_feature6_1,s2l8_feature11_2,s2l8_feature11_1,s2l8_feature13_2,
s2l8_feature13_3,s2l8_feature13_4,s2l8_feature13_5,s2l8_feature15_3,
s2l81_may_1,s2l81_may_2,s2l8_feature5_1,s2l8_feature9_1,
s2l8_feature10_1,s2l8_feature11_4,s2l8_feature13_1,s2l82_may_2,
s2l83_may_2,s2l84_may_1,s2l85_may_1,s2l86_may_1,s2l87_may_3,
s2l87_may_4,s2l88_may_2,s2l89_may_1,s2l89_may_2,s2l810_may_1,
s2l811_may_1,s2l811_may_2
])

//2:8
//var bands= ['NDWI','SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1','gray_asm','gray_contrast','gray_corr','gray_var','gray_idm','gray_savg','gray_svar','gray_sent','gray_ent']

//var bands =['NDWI', 'SR_B3', 'SR_B5','gray_asm','gray_savg']// 0.9
//var bands = ['NDWI','SR_B3','SR_B5','gray_sent','gray_ent']//0.7 seed = 43
//var bands = ['NDWI','SR_B3','SR_B5','gray_asm','gray_idm']//0.8 seed=42
//var bands = ['SR_B3','SR_B5','gray_asm']//0.8 seed=41
//var bands =['SR_B4', 'SR_B3','SR_B5','gray_asm']//0.8 seed=40
//var bands =['NDWI','SR_B3', 'SR_B2','SR_B5','SR_B1','gray_asm','gray_corr','gray_sent','gray_ent']//0.7 seed=39
//var bands =['NDWI','SR_B3','SR_B5','gray_asm']//0.9-1 seed=38
//var bands = ['NDWI','SR_B3', 'SR_B2','SR_B5','gray_asm']//0.9 seed=37
//var bands = ['NDWI','SR_B5','gray_var','gray_idm']//0.8 seed=36
//var bands =['SR_B3','SR_B5','gray_ent']//0.8 seed = 35
//var bands = ['NDWI','SR_B4', 'SR_B3', 'SR_B2','SR_B5','gray_corr']//0.9 seed=44
//var bands =['NDWI','SR_B3','SR_B5','gray_asm','gray_savg']//0.9 seed=45
//7:3
//var bands= ['NDWI','SR_B4','SR_B3','SR_B1','gray_corr','gray_var','gray_idm','gray_sent']//seed=37 0.53
//var bands=['SR_B3','SR_B5','gray_corr']//0.567 seed=34
//var bands=['SR_B4', 'SR_B3', 'SR_B2','SR_B5','SR_B1','gray_asm','gray_svar']//seed=48 0.6
//var bands=['NDWI','SR_B3','SR_B5','gray_corr','gray_idm','gray_sent']//seed=50
//var bands=['NDWI','SR_B3','gray_idm']//seed=52 0.6
//var bands=['NDWI','SR_B3','SR_B5','gray_corr','gray_sent','gray_ent']
var bands = ['NDWI','SR_B3', 'SR_B2','SR_B5','gray_asm']
//feature importance
//var bands=['SR_B4','gray_savg','SR_B5']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI','SR_B2']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI','SR_B2','gray_var']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI','SR_B2','gray_var','gray_idm']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI','SR_B2','gray_var','gray_idm','gray_svar']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI','SR_B2','gray_var','gray_idm','gray_svar','gray_ent']
//var bands=['SR_B4','gray_savg','SR_B5','SR_B1','SR_B3','gray_asm','gray_corr','gray_contrast','NDWI','SR_B2','gray_var','gray_idm','gray_svar','gray_ent','gray_sent']
var label = 'waterlevel'
var trainingNoNulls = text_feature_finally.filter(
  ee.Filter.notNull(text_feature_finally.first().propertyNames())
);


// 计算各类样本数量
var classCounts = trainingNoNulls.reduceColumns(ee.Reducer.frequencyHistogram(), [label]).get('histogram');
classCounts = ee.Dictionary(classCounts);
//print('Class counts:', classCounts);

// 获取类别及其数量
var classValues = classCounts.keys();
var classSamples = classValues.map(function(value) {
  return trainingNoNulls.filter(ee.Filter.eq(label, ee.Number.parse(value)));
});

 //找出最大类别数量
var maxSamples = ee.Number(classCounts.values().reduce(ee.Reducer.max()));
//print('Max class samples:', maxSamples);

// 对少数类进行过采样
var oversample = function(samples) {
  samples = ee.FeatureCollection(samples);
  var count = ee.Number(samples.size());
  var multiplier = maxSamples.divide(count).ceil().int();
  
  var oversampled = ee.FeatureCollection(ee.List.sequence(1, multiplier).iterate(function(i, fc) {
    return ee.FeatureCollection(fc).merge(samples);
  }, ee.FeatureCollection([]))).limit(maxSamples);
  
  return oversampled;
};

var balancedSamples = ee.FeatureCollection(classSamples.map(oversample)).flatten();



var withRandom1 = trainingNoNulls.randomColumn('random');//样本点随机的排列
var withRandom = balancedSamples.randomColumn('random');
var split = 0.8; 
//var trainingPartition = withRandom.filter(ee.Filter.lt('random', split));//筛选80%的样本作为训练样本
//var testingPartition = withRandom.filter(ee.Filter.gte('random', split));

var trainingPartition = withRandom.filter(ee.Filter.lt('random', split));//筛选80%的样本作为训练样本
var testingPartition = withRandom.filter(ee.Filter.gte('random', split));

/*print(trainingPartition)
print(testingPartition)
Export.table.toDrive({
  collection: trainingPartition,
  description: 'trainingPartition',
  folder: 'my_file',
  fileFormat: 'CSV'
});*/
// 训练不同的分类器
var trainedClassifier = ee.Classifier.smileRandomForest(29).train({
  features: trainingPartition,
  classProperty: label,
  inputProperties: bands
});

var trained_cart = ee.Classifier.smileCart(30).train(trainingPartition, label, bands);

var trained_svm = ee.Classifier.libsvm({
  kernelType: 'RBF', gamma:60, cost: 10
}).train(trainingPartition, label, bands);

var trained_knn = ee.Classifier.smileKNN(2).train({
  features: trainingPartition,
  classProperty: label,
  inputProperties: bands
});

var trainedClassifier_tree = ee.Classifier.smileGradientTreeBoost(28).train({
  features: trainingPartition,
  classProperty: label,  
  inputProperties: bands
});

var trainedClassifier_nb = ee.Classifier.smileNaiveBayes().train({
  features: trainingPartition,
  classProperty: label,
  inputProperties: bands
});

// 对测试集进行分类
var classifier_rf = testingPartition.classify(trainedClassifier)
var classifier_cart = testingPartition.classify(trained_cart)
var classifier_svm = testingPartition.classify(trained_svm)
var classifier_knn = testingPartition.classify(trained_knn)
var classifier_gtb = testingPartition.classify(trainedClassifier_tree)
var classifier_nb = testingPartition.classify(trainedClassifier_nb)

var confusionMatrix_knn = classifier_knn.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_knn', confusionMatrix_knn.accuracy());// 面板上显示总体精度
//print('kappa accuracy_knn', confusionMatrix_knn.kappa());//面板上显示kappa值
  
  
//train classifer
var classifier_rf_train = trainingPartition.classify(trainedClassifier)
var classifier_cart_train = trainingPartition.classify(trained_cart)
var classifier_svm_train = trainingPartition.classify(trained_svm)
var classifier_gtb_train = trainingPartition.classify(trainedClassifier_tree)
var classifier_knn_train = trainingPartition.classify(trained_knn)

var confusionMatrix_knn_train = classifier_knn_train.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_knn', confusionMatrix_knn_train.accuracy());// 面板上显示总体精度
//print('kappa accuracy_knn', confusionMatrix_knn_train.kappa());//面板上显示kappa值 
print("1")
print(confusionMatrix_knn_train)
  
var confusionMatrix_RF_train = classifier_rf_train.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_rf_train', confusionMatrix_RF_train.accuracy());// 面板上显示总体精度
//print('kappa accuracy_rf_train', confusionMatrix_RF_train.kappa());//面板上显示kappa值
print(confusionMatrix_RF_train)
var confusionMatrix_cart_train = classifier_cart_train.errorMatrix('waterlevel', 'classification');
///print('overall accuracy_cart_train', confusionMatrix_cart_train.accuracy());// 面板上显示总体精度
//print('kappa accuracy_cart_train', confusionMatrix_cart_train.kappa());//面板上显示kappa值
print(confusionMatrix_cart_train)
var confusionMatrix_svm_train = classifier_svm_train.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_svm_train', confusionMatrix_svm_train.accuracy());// 面板上显示总体精度
//print('kappa accuracy_svm_train', confusionMatrix_svm_train.kappa());//面板上显示kappa值
print(confusionMatrix_svm_train)
var confusionMatrix_tree_train = classifier_gtb_train.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_gtb_train', confusionMatrix_tree_train.accuracy());// 面板上显示总体精度
//print('kappa accuracy_gtb_train', confusionMatrix_tree_train.kappa());//面板上显示kappa值
print(confusionMatrix_tree_train)



/*
//Get feature importance from trained classifier
var dict = trainedClassifier.explain();
var variable_importance = ee.Feature(null, ee.Dictionary(dict).get('importance'));
var cc = variable_importance.toDictionary();
var cc_p = cc.getInfo();
var ks = Object.keys(cc_p);
var size = ks.length;

// Create an array to hold the importance values and corresponding keys
var importanceArray = [];
for (var i = 0; i < size; i++) {
  importanceArray.push({
    key: ks[i],
    value: cc_p[ks[i]]
  });
}

// Sort the importance array in descending order based on the 'value' property
importanceArray.sort(function(a, b) {
  return b.value - a.value;
});
print(importanceArray)
// Create the sorted importance array containing only the keys
var sortedImportance = importanceArray.map(function(item) {
  return item.key;
});

// Print or use the sorted importance array
print('Sorted Importance:', sortedImportance);*/

var confusionMatrix_RF = classifier_rf.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_rf', confusionMatrix_RF.accuracy());// 面板上显示总体精度
//print('kappa accuracy_rf', confusionMatrix_RF.kappa());//面板上显示kappa值
// 计算召回率


var confusionMatrix_cart = classifier_cart.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_cart', confusionMatrix_cart.accuracy());// 面板上显示总体精度
//print('kappa accuracy_cart', confusionMatrix_cart.kappa());//面板上显示kappa值

var confusionMatrix_svm = classifier_svm.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_svm', confusionMatrix_svm.accuracy());// 面板上显示总体精度
//print('kappa accuracy_svm', confusionMatrix_svm.kappa());//面板上显示kappa值

var confusionMatrix_tree = classifier_gtb.errorMatrix('waterlevel', 'classification');
//print('overall accuracy_gtb', confusionMatrix_tree.accuracy());// 面板上显示总体精度
//print('kappa accuracy_gtb', confusionMatrix_tree.kappa());//面板上显示kappa值





// 设定K值
var K = 30;

// 将数据集分成K个子集
var folds = trainingPartition.randomColumn('random').sort('random').aggregate_array('system:index');
var foldSize = ee.Number(folds.size()).divide(K).floor();

// 初始化列表来存储每个子集的预测结果
var predictionsList = ee.List([]);

// 循环K次，每次用K-1个子集训练模型，并用第K个子集进行预测
for (var i = 0; i < K; i++) {
  // 创建训练和验证集
  var start = foldSize.multiply(i);
  var end = foldSize.multiply(i + 1);

  var validationIndexes = folds.slice(start, end);
  var validationFold = trainingPartition.filter(ee.Filter.inList('system:index', validationIndexes));

  var trainingIndexes = folds.slice(0, start).cat(folds.slice(end));
  var trainingFold = trainingPartition.filter(ee.Filter.inList('system:index', trainingIndexes));

  // 训练模型
  var trained_rf = ee.Classifier.smileRandomForest(26).train({
    features: trainingFold,
    classProperty: label,
    inputProperties: bands
  });

  var trained_svm = ee.Classifier.libsvm({
    kernelType: 'RBF', gamma: 50, cost: 10
  }).train(trainingFold, label, bands);

  
  var trained_cart = ee.Classifier.smileCart(50).train({
    features: trainingFold,
    classProperty: label,
    inputProperties: bands
  });

  // 预测验证集
  var RF_val_pred = validationFold.classify(trained_rf).select(['classification'], ['RF_pred']);
  var SVM_val_pred = validationFold.classify(trained_svm).select(['classification'], ['SVM_pred']);
  var CART_val_pred = validationFold.classify(trained_cart).select(['classification'], ['CART_pred']);

  // 将第一层模型的预测结果添加到验证集中
  var stack_val = validationFold.map(function(feature) {
    var rf_pred = RF_val_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('RF_pred');
    var svm_pred = SVM_val_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('SVM_pred');
    var cart_pred = CART_val_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('CART_pred');
    return feature.set({
      'RF_pred': rf_pred,
      'SVM_pred': svm_pred,
      'CART_pred': cart_pred,
      'water_quality_numeric': ee.Number.parse(feature.get('waterlevel'))
    });
  });

  // 将验证集的预测结果添加到列表中
  predictionsList = predictionsList.add(stack_val);
}

// 将所有预测结果拼接起来
var stackedPredictions = ee.FeatureCollection(predictionsList.iterate(function(fold, merged) {
  return ee.FeatureCollection(merged).merge(fold);
}, ee.FeatureCollection([])));

// 准备进行线性回归的数据
var predictors = stackedPredictions.select(['RF_pred', 'SVM_pred', 'CART_pred', 'water_quality_numeric']);

// 获取线性回归系数
var regressionResults = predictors.reduceColumns(ee.Reducer.linearRegression({
  numX: 3,
  numY: 1
}), ['RF_pred', 'SVM_pred', 'CART_pred', 'water_quality_numeric']);

// 获取线性回归系数
var coefficients = ee.Array(regressionResults.get('coefficients')).toList().flatten();

// 提取线性回归系数
var RF_coef = ee.Number(coefficients.get(0));
var SVM_coef = ee.Number(coefficients.get(1));
var CART_coef = ee.Number(coefficients.get(2));

// 预测测试数据
var RF_test_pred = testingPartition.classify(trained_rf).select(['classification'], ['RF_pred']);
var SVM_test_pred = testingPartition.classify(trained_svm).select(['classification'], ['SVM_pred']);
var CART_test_pred = testingPartition.classify(trained_cart).select(['classification'], ['CART_pred']);

// 将测试数据中的第一层模型预测结果添加到测试数据集中
var stack_test = testingPartition.map(function(feature) {
  var rf_pred = RF_test_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('RF_pred');
  var svm_pred = SVM_test_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('SVM_pred');
  var cart_pred = CART_test_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('CART_pred');
  return feature.set({
    'RF_pred': rf_pred,
    'SVM_pred': svm_pred,
    'CART_pred': cart_pred
  });
});

// 进行预测
var predict = function(feature) {
  var RF_pred = ee.Number(feature.get('RF_pred'));
  var SVM_pred = ee.Number(feature.get('SVM_pred'));
  var CART_pred = ee.Number(feature.get('CART_pred'));
  var prediction = RF_pred.multiply(RF_coef)
    .add(SVM_pred.multiply(SVM_coef))
    .add(CART_pred.multiply(CART_coef));
  return feature.set('classification', prediction.round());
};

// 应用预测
var final_pred_test = stack_test.map(predict);

// 评估模型
var errorMatrix_test = final_pred_test.errorMatrix('waterlevel', 'classification');
//print('Confusion Matrix test: ', errorMatrix_test);
//print('Overall Accuracy test: ', errorMatrix_test.accuracy());
 // print('kappa accuracy test', errorMatrix_test.kappa());//面板上显示kappa值



var RF_train_pred = trainingPartition.classify(trained_rf).select(['classification'], ['RF_pred']);
var SVM_train_pred = trainingPartition.classify(trained_svm).select(['classification'], ['SVM_pred']);
var CART_train_pred = trainingPartition.classify(trained_cart).select(['classification'], ['CART_pred']);
// 将训练数据中的第一层模型预测结果添加到测试数据集中
var stack_train = trainingPartition.map(function(feature) {
  var rf_pred = RF_train_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('RF_pred');
  var svm_pred = SVM_train_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('SVM_pred');
  var cart_pred = CART_train_pred.filter(ee.Filter.eq('system:index', feature.get('system:index'))).first().get('CART_pred');
  return feature.set({
    'RF_pred': rf_pred,
    'SVM_pred': svm_pred,
    'CART_pred': cart_pred
  });
});
var final_pred_train = stack_train.map(predict);
var errorMatrix_train = final_pred_train.errorMatrix('waterlevel', 'classification');
print('Confusion Matrix train: ', errorMatrix_train);
//print('Overall Accuracy train: ', errorMatrix_train.accuracy());
//print('kappa accuracy Train', errorMatrix_train.kappa());//面板上显示kappa值



//inversion
var roi = table
var roi1=table2
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0); // 去云

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);// 这里就是对以SR开头的波段进行一个计算，让它回到一个正常的值，以便我们使用。
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0); // 这里就是对我们要得到的地表温度波段进行计算
  
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask);
}
var collection_l8_water=ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
                  .filterDate('2022-5-1', '2022-8-1') //筛选日期设置
                  .filterBounds(table2)
                  .map(maskL8sr)
                  .filter(ee.Filter.lte('CLOUD_COVER',20))//云量设置
                  .sort('CLOUD_COVER')//按云量排序

//print(collection_l8_water)
var img_water = collection_l8_water.mosaic()
//NDWI
var ndwi = img_water.normalizedDifference(['SR_B3','SR_B5']).float().rename('NDWI')
img_water=img_water.addBands(ndwi)
//GLCM
var gray = img_water.expression(
      '(0.3 * NIR) + (0.59 * R) + (0.11 * G)', {
      'NIR': img_water.select('SR_B5'),
      'R': img_water.select('SR_B4'),
      'G': img_water.select('SR_B3'),
}).rename('gray');
var glcm = gray.unitScale(0,0.30).multiply(100).toInt().glcmTexture({size: 1,kernel:null});
// Normalized
var band_glcm = glcm.select(['gray_asm','gray_contrast','gray_corr','gray_var','gray_idm',
                             'gray_savg','gray_svar','gray_sent','gray_ent']);
// calculate the min and max value of an image
var minMax = band_glcm.reduceRegion({
  reducer: ee.Reducer.minMax(),
  geometry: roi,
  scale: 30,
  maxPixels: 1e16,
});
 
var glcm = ee.ImageCollection.fromImages(
  band_glcm.bandNames().map(function(name){
    name = ee.String(name);
    var band = band_glcm.select(name);
    return band.unitScale(ee.Number(minMax.get(name.cat('_min'))), ee.Number(minMax.get(name.cat('_max'))))
})).toBands().rename(band_glcm.bandNames());
img_water=img_water.addBands(glcm)
// 计算NDWI（归一化水体指数）
var ndwi = img_water.normalizedDifference(['SR_B3', 'SR_B5']).rename('NDWI');

// 设置阈值进行水体提取
var water_threshold = 0.1; // 根据具体情况调整阈值
var water_mask = ndwi.gt(water_threshold);

// 应用水体掩膜到原始影像
var image_water = img_water.updateMask(water_mask);

// 将影像裁剪到水体掩膜的边界
var water_vector = water_mask.updateMask(water_mask).reduceToVectors({
  geometryType: 'polygon',
  scale: 30,
  geometry: table2,
  maxPixels: 1e8
}).geometry();

image_water = image_water.clip(water_vector);


//print(image_water)
// 提取图像特征
var image_features = image_water.select(bands);

// 使用第一层模型进行分类
var RF_image_pred = image_features.classify(trained_rf).rename('RF_pred');
var SVM_image_pred = image_features.classify(trained_svm).rename('SVM_pred');
var CART_image_pred = image_features.classify(trained_cart).rename('CART_pred');

// 堆叠第一层模型的预测结果
var stacked_image = RF_image_pred.addBands(SVM_image_pred).addBands(CART_image_pred);

// 使用线性回归模型进行最终分类
var final_classification = stacked_image.expression(
  'RF_pred * RF_coef + SVM_pred * SVM_coef + CART_pred * CART_coef', {
    'RF_pred': stacked_image.select('RF_pred'),
    'SVM_pred': stacked_image.select('SVM_pred'),
    'CART_pred': stacked_image.select('CART_pred'),
    'RF_coef': RF_coef,
    'SVM_coef': SVM_coef,
    'CART_coef': CART_coef
  }
).round().rename('classification');
///print(final_classification)
// 可视化结果
//Map.centerObject(image_water, 10);
//Map.addLayer(image_water, {}, 'Original Image');
//Map.addLayer(final_classification, {min: 0, max: 1, palette: ['blue', 'green', 'red']}, 'Classification');
// 可视化原始影像
// 可视化水体提取结果（仅显示水体部分）
//Map.addLayer(image_water, {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 0, max: 3000}, 'Water Masked Image');

var songhua_river=table2
Map.centerObject(roi,6)

// 训练模型
  var trained_rf = ee.Classifier.smileRandomForest(26).train({
    features: trainingFold,
    classProperty: label,
    inputProperties: bands
  });
//Map.addLayer(img_water, visualization, 'True Color (432)');
var water_img_rf = image_water.classify(trained_rf)

/*
//caculate NDVI
var img_ndvi=image_water
var ndvi=img_ndvi.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI')
img_ndvi=img_ndvi.addBands(ndvi)
Export.image.toDrive({

        image: img_ndvi.select('NDVI'),

        description: 'roi_ndvi5566_1',

        fileNamePrefix:'roi_ndvi5566_1',

        region: river,

        scale:5566,

        maxPixels: 1e13,
        
        fileFormat: 'GeoTIFF'
      });*/
